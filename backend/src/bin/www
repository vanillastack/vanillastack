#!/usr/bin/env node

/**
 * Module dependencies.
 */
require('dotenv').config();
const config = require('../config/config');
const app = require('../app');
const { wss } = require('../services/websocket');
const { getClient } = require('../services/users');
const debug = require('debug')('backend:server');
const http = require('http');
const url = require('url');
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
app.locals.config = config;
/**
 * Create HTTP server.
 */

const server = http.createServer(app);
// const wss = new WebSocket.Server({server});
/**
 * Listen on provided port, on all network interfaces.
 */
let startMsg = `Server Version ${app.locals.config.version} started on port ${port} `;
startMsg += `in ${app.locals.config.mode} Mode `;
startMsg += `and Debug ${app.locals.config.debug ? 'enabled' : 'disabled'}`;
server.listen(port, () => {
  console.log(startMsg);
});
server.on('error', onError);
server.on('listening', onListening);
server.on('upgrade', onUpgrade);

/**
 * Webserver event handler for Websocket upgrades
 * @param request
 * @param socket
 * @param head
 */
function onUpgrade(request, socket, head) {
  const { uuid } = getParams(request.url);
  authenticate(uuid, (err, client) => {
    if (err || !client) {
      const errorIsSend = socket.write('HTTP/1.1 401 Unauthorized\r\n\r\n');
      console.log('Sending Error Msg for unauthenticated WS-Request');
      while (!errorIsSend) {}
      socket.destroy();
      console.log('WS-Socket destroyed');

      return;
    }
    request.uuid = client.uuid;
    wss.handleUpgrade(request, socket, head, function done(ws) {
      wss.emit('connection', ws, request, client);
    });
  });
}

const authenticate = function (uuid, callback) {
  // console.log(uuid);
  callback(false, getClient(uuid));
  // if (getClient(uuid)) {
  //     callback(false, getClient(uuid));
  // } else {
  //     callback(false, false);
  // }
};

const getParams = (path) => {
  try {
    const parsed = url.parse(path);
    const res = { path: parsed.pathname };
    // split our query params
    parsed.query.split('&').forEach((param) => {
      const [k, v] = param.split('=');
      res[k] = v;
    });
    return res;
  } catch (err) {
    return 'na';
  }
};

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
