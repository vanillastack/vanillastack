kubeTargetVersionOverride: "{{ kubernetes.version }}"
fullnameOverride: "prometheus"
alertmanager:
  enabled: {{ alertmanager.enabled }}
  config:
    {{alertmanager.config|indent(width=4)}}

  ingress:
    enabled: "{{ alertmanager.ingress.enabled }}"
    annotations:
      nginx.ingress.kubernetes.io/proxy-body-size: 1024m
      cert-manager.io/cluster-issuer: {{ LE_issuer_name }}
      kubernetes.io/tls-acme: "true"
      nginx.ingress.kubernetes.io/auth-secret: alertmanager-basic-auth
      nginx.ingress.kubernetes.io/auth-type: basic
      nginx.ingress.kubernetes.io/auth-realm: "Authentication Required"

    labels: {}
    hosts:
      - "{{ alertmanager.ingress.dns }}"
    paths:
      - /
    tls:
    - hosts:
      - "{{ alertmanager.ingress.dns }}"
      secretName: alertmanager-ingress-tls

  alertmanagerSpec:
    replicas: {{alertmanager.replicas|default(1)}}
    image:
{% if commercial.enabled %}
      repository: {{repositories.registry_commercial}}/vanillastack/alertmanager
{% else %}
      repository: quay.io/monitoring.alertmanager
{% endif %}
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: {{ alertmanager.storage.classname }}
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: {{ alertmanager.storage.size }}
    externalUrl: "https://{{ alertmanager.ingress.dns }}"
    routePrefix: /
    resources:
      limits:
        cpu: {{ alertmanager.resources.limits.cpu }}
        memory: {{ alertmanager.resources.limits.memory }}
      requests:
        cpu: {{ alertmanager.resources.requests.cpu }}
        memory: {{ alertmanager.resources.requests.memory }}
grafana:
  enabled: {{ grafana.enabled }}
  namespaceOverride: "monitoring"
  defaultDashboardsEnabled: true

  adminPassword: "{{ grafana.admin_password }}"

  ingress:
    enabled: "{{ grafana.ingress.enabled }}"
    annotations:
      nginx.ingress.kubernetes.io/proxy-body-size: 1024m
      cert-manager.io/cluster-issuer: {{ LE_issuer_name }}
      kubernetes.io/tls-acme: "true"
    labels: {}
    hosts:
      - "{{ grafana.ingress.dns }}"
    path: /
    tls:
    - hosts:
      - "{{ grafana.ingress.dns }}"
      secretName: grafana-ingress-tls

kubeControllerManager:
  enabled: {{ monitoring.kubeControllerManager.enabled }}
  endpoints: []
  service:
    port: 10257
    targetPort: 10257

coreDns:
  enabled: {{ monitoring.coreDns.enabled }}
  service:
    port: 9153
    targetPort: 9153

kubeDns:
  enabled: {{ monitoring.kubeDns.enabled }}

kubeEtcd:
  enabled: {{ monitoring.kubeEtcd.enabled }}

kubeScheduler:
  enabled: {{ monitoring.kubeScheduler.enabled }}

kubeProxy:
  enabled: {{ monitoring.kubeProxy.enabled }}

kubeStateMetrics:
  enabled: {{ monitoring.kubeStateMetrics.enabled }}

prometheusOperator:
  enabled: true
  manageCrds: true

  tlsProxy:
    enabled: true
    image:
{% if commercial.enabled %}
      repository: {{repositories.registry_commercial}}/vanillastack/ghostunnel
{% else %}
      repository: squareup/ghostunnel
{% endif %}

  admissionWebhooks:
    failurePolicy: Fail
    enabled: true
    patch:
      enabled: true
      image:
{% if commercial.enabled %}
        repository: {{repositories.registry_commercial}}/vanillastack/kube-webhook-certgen
{% else %}
        repository: jettech/kube-webhook-certgen
{% endif %}

  image:
{% if commercial.enabled %}
    repository: {{repositories.registry_commercial}}/vanillastack/prometheus-operator
{% else %}
    repository: quay.io/coreos/prometheus-operator
{% endif %}
  configmapReloadImage:
{% if commercial.enabled %}
    repository: {{repositories.registry_commercial}}/vanillastack/configmap-reload
{% else %}
    repository: docker.io/jimmidyson/configmap-reload
{% endif %}
  monitoring.onfigReloaderImage:
{% if commercial.enabled %}
    repository: {{repositories.registry_commercial}}/vanillastack/prometheus-config-reloader
{% else %}
    repository: quay.io/coreos/prometheus-config-reloader
{% endif %}
  hyperkubeImage:
{% if commercial.enabled %}
    repository: {{repositories.registry_commercial}}/vanillastack/hyperkube
{% else %}
    repository: k8s.gcr.io/hyperkube
{% endif %}

prometheus:
  enabled: {{ vanillaservices.monitoring_enabled }}

  ingress:
    enabled: "{{ monitoring.ingress.enabled }}"
    annotations:
      nginx.ingress.kubernetes.io/proxy-body-size: 1024m
      cert-manager.io/cluster-issuer: {{ LE_issuer_name }}
      kubernetes.io/tls-acme: "true"
      nginx.ingress.kubernetes.io/auth-secret: prometheus-basic-auth
      nginx.ingress.kubernetes.io/auth-type: basic
      nginx.ingress.kubernetes.io/auth-realm: "Authentication Required"
    labels: {}
    hosts:
      - "{{ monitoring.ingress.dns }}"
    paths:
      - /
    tls:
    - hosts:
      - "{{ monitoring.ingress.dns }}"
      secretName: monitoring-ingress-tls
  prometheusSpec:
    replicas: {{monitoring.replicas|default(1)}}
    image:
{% if commercial.enabled %}
      repository: {{repositories.registry_commercial}}/vanillastack/prometheus
{% else %}
      repository: quay.io/prometheus/prometheus
{% endif %}
    externalUrl: "https://{{ monitoring.ingress.dns }}"
    resources:
      limits:
        cpu: {{ monitoring.resources.limits.cpu }}
        memory: {{ monitoring.resources.limits.memory }}
      requests:
        cpu: {{ monitoring.resources.requests.cpu }}
        memory: {{ monitoring.resources.requests.memory }}
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: {{ monitoring.storage.classname }}
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: {{ monitoring.storage.size }}
