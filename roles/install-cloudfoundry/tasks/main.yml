---
- name: helm installation kubecf
  block:
  - name: Deploy latest version of CloudFoundry
    community.kubernetes.helm:
      name: cf-operator
      chart_ref: vanillastack/quarks
      release_namespace: cf-operator
      chart_version: "{{ cloudfoundry.operator.version }}"
      values: 
        global:
          singleNamespace:
            name: kubecf
      create_namespace: true
      wait: true

  - name: install Kubecf
    community.kubernetes.helm:
      name: kubecf
      chart_ref: vanillastack/kubecf
      release_namespace: kubecf
      chart_version: "{{ cloudfoundry.version }}"
      values: "{{ lookup('template', 'kubecf-values.yaml.j2') | from_yaml }}"
    register: kubecf_install

- name: Patch nginx 
  command: >
    helm upgrade -n {{ ingress.namespace }} nginx-ingress vanillastack/ingress-nginx \
    --reuse-values \
    --set "tcp.2222=kubecf/scheduler:2222" \
    --set "tcp.20000=kubecf/tcp-router:20000" \
    --set "tcp.20001=kubecf/tcp-router:20001" \
    --set "tcp.20002=kubecf/tcp-router:20002" \
    --set "tcp.20003=kubecf/tcp-router:20003" \
    --set "tcp.20004=kubecf/tcp-router:20004" \
    --set "tcp.20005=kubecf/tcp-router:20005" \
    --set "tcp.20006=kubecf/tcp-router:20006" \
    --set "tcp.20007=kubecf/tcp-router:20007" \
    --set "tcp.20008=kubecf/tcp-router:20008"

- name: wait for db to come up
  command: kubectl wait --namespace=kubecf --for=condition=ready pods -l quarks.cloudfoundry.org/quarks-statefulset-name=database --timeout=10s
  retries: 180
  delay: 10
  register: result
  until: result.rc == 0

- name: reset eirini pod
  command: kubectl delete --wait po -n kubecf -l name=eirini-routing

- name: wait for eirini router to come up
  command: >
    kubectl wait --namespace=kubecf --for=condition=ready \
    pods -l name=eirini-routing --timeout=10s
  retries: 180
  delay: 10
  register: result
  until: result.rc == 0

- name: wait for router sts to be existant    
  command: kubectl wait --namespace=kubecf --for=condition=podscheduled pods router-0 --timeout=10s
  retries: 180
  delay: 10
  register: result
  until: result.rc == 0
   
- name: Patch RouterStatefullset
  command: >
    kubectl patch sts -n kubecf router \
    --patch '{"spec": {"template": {"spec": {"initContainers": [{"name": "bpm-pre-start-gorouter","securityContext": {"privileged": true}}]}}}}'

- name: wait for pods to be ready
  command: >
    kubectl wait --namespace=kubecf --for=condition=ready \
    pods -l app.kubernetes.io/component=router --timeout=10s
  retries: 360
  delay: 10
  register: result
  until: result.rc == 0

- debug:
    msg: "{{ kubecf_install.stdout_lines }}"
