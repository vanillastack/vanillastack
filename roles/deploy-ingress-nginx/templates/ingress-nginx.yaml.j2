---
controller:
  image:
{% if commercial.enabled %}
    repository: {{repositories.registry_commercial}}/vanillastack/controller
{% else %}
    repository: k8s.gcr.io/ingress-nginx/controller
{% endif %}
    tag: "v0.44.0"
    digest: sha256:3dd0fac48073beaca2d67a78c746c7593f9c575168a17139a9955a82c63c4b9a
    pullPolicy: IfNotPresent
    # www-data -> uid 101
    runAsUser: 101
    allowPrivilegeEscalation: true
  service:
    type: "NodePort"
    nodePorts:
      http: {{ ingress_http_port | default(30080) }}
      https: {{ ingress_https_port | default(30443) }}
  config: {{ingress.config|default("{}")}}

  replicaCount: 3
  minAvailable: 1
  resources:
    requests:
      cpu: 100m
      memory: 90Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 11
    targetCPUUtilizationPercentage: 50
    targetMemoryUtilizationPercentage: 50

  admissionWebhooks:
    annotations: {}
    enabled: true
    failurePolicy: Fail
    # timeoutSeconds: 10
    port: 8443
    certificate: "/usr/local/certificates/cert"
    key: "/usr/local/certificates/key"
    namespaceSelector: {}
    objectSelector: {}

    service:
      annotations: {}
      # clusterIP: ""
      externalIPs: []
      # loadBalancerIP: ""
      loadBalancerSourceRanges: []
      servicePort: 443
      type: ClusterIP

    patch:
      enabled: true
      image:
{% if commercial.enabled %}
        repository: {{repositories.registry_commercial}}/vanillastack/kube-webhook-certgen
{% else %}
        repository: docker.io/jettech/kube-webhook-certgen
{% endif %}
        tag: v1.5.1
        pullPolicy: IfNotPresent
      ## Provide a priority class name to the webhook patching job
      ##
      priorityClassName: ""
      podAnnotations: {}
      nodeSelector: {}
      tolerations: []
      runAsUser: 2000

  metrics:
    port: 10254
    # if this port is changed, change healthz-port: in extraArgs: accordingly
    enabled: true

    service:
      annotations: {}
      # prometheus.io/scrape: "true"
      # prometheus.io/port: "10254"

      # clusterIP: ""

      ## List of IP addresses at which the stats-exporter service is available
      ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips
      ##
      externalIPs: []

      # loadBalancerIP: ""
      loadBalancerSourceRanges: []
      servicePort: 9913
      type: ClusterIP
      # externalTrafficPolicy: ""
      # nodePort: ""

    serviceMonitor:
      enabled: true
      additionalLabels:
        release: prometheus-operator
      namespace: ""
      namespaceSelector: {}
      # Default: scrape .Release.Namespace only
      # To scrape all, use the following:
      # namespaceSelector:
      #   any: true
      scrapeInterval: 10s
      # honorLabels: true
      targetLabels: []
      metricRelabelings: []

defaultBackend:
  ##
  enabled: true
  image:
{% if commercial.enabled %}
    repository: {{repositories.registry_commercial}}/vanillastack/defaultbackend-amd64
{% else %}
    repository: k8s.gcr.io/defaultbackend-amd64
{% endif %}
    tag: "1.5"
    pullPolicy: IfNotPresent
    # nobody user -> uid 65534
    runAsUser: 65534
