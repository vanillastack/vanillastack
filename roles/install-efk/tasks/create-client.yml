- name: check if client is already created
  k8s_info:
    api_version: keycloak.org/v1alpha1
    kind: KeycloakClient
    namespace: "{{ keycloak.namespace }}"
    name: kibana-client
  register: clientsecret
- name: create kibanaclient
  block:
    - name: create kibanasecret password
      set_fact:
        kibana_client_secret: "{{ lookup('password', '/dev/null length=15 chars=ascii_letters') }}"
    
    - name: Deploy kibanaclient
      community.kubernetes.k8s:
        definition: "{{ lookup('template', 'kibana-client-keycloack.yml.j2') | from_yaml }}"
        state: present
        wait: true
    - pause:
        seconds: 30
  when: clientsecret.resources|length<1

- name: get admin password
  k8s_info:
    kind: Secret
    namespace: "{{ keycloak.namespace }}"
    name: credential-vanillastack-keycloak
  register: admincred

- set_fact:
    admin_password: "{{ admincred.resources[0].data.ADMIN_PASSWORD | b64decode }}"

- name: generate bearertoken
  uri:
    url: "https://keycloak.{{ clusterTLDomain }}/auth/realms/master/protocol/openid-connect/token"
    validate_certs: false
    method: POST
    body_format: form-urlencoded
    body:
      client_id: admin-cli
      username: admin
      password: "{{ admin_password }}"
      grant_type: password
  register: bearertoken

- name: get kibana client id
  uri:
    url: "https://keycloak.{{ clusterTLDomain }}/auth/admin/realms/{{ clusterTLDomain }}/clients"
    validate_certs: false
    method: GET
    headers:
      Authorization: "bearer {{ bearertoken.json.access_token }}"
      Content-Type: application/json
  register: clientids

- set_fact:
    query: "[?clientId=='kibana.{{ clusterTLDomain }}'].id"

- name: create kibana role
  ignore_errors: true
  uri:
    url: "https://keycloak.{{ clusterTLDomain }}/auth/admin/realms/{{ clusterTLDomain }}/clients/{{ clientids.json | json_query(query) | first }}/roles"
    validate_certs: false
    headers:
      Authorization: "bearer {{ bearertoken.json.access_token }}"
      Content-Type: application/json
    method: POST
    body_format: json
    status_code: 201
    body: '{ "name": "admin", "clientRole": true, "composite": false }'
  register: roleid

- debug:
    msg: "{{ roleid }}"

- name: create kibana mapping
  ignore_errors: true
  uri:
    url: "https://keycloak.{{ clusterTLDomain }}/auth/admin/realms/{{ clusterTLDomain }}/clients/{{ clientids.json | json_query(query) | first }}/protocol-mappers/models"
    validate_certs: false
    headers:
      Authorization: "bearer {{ bearertoken.json.access_token }}"
      Content-Type: application/json
    method: POST
    body_format: json
    status_code: 201
    body: '{ "config": {
                "access.token.claim": "true",
                "claim.name": "roles",
                "id.token.claim": "true",
                "jsonType.label": "String",
                "multivalued": "true",
                "userinfo.token.claim": "true",
                "usermodel.clientRoleMapping.clientId": "kibana.{{ clusterTLDomain }}"
            },
            "consentRequired": false,
            "name": "Roles",
            "protocol": "openid-connect",
            "protocolMapper": "oidc-usermodel-client-role-mapper"
          }'
          
- name: get kibana secret if not defined
  block:
    - name: get kibana client secret
      k8s_info:
        api_version: keycloak.org/v1alpha1
        kind: KeycloakClient
        namespace: "{{ keycloak.namespace }}"
        name: kibana-client
      register: clientsecret
    
    - set_fact:
        kibana_client_secret: "{{ clientsecret.resources[0].spec.client.secret }}"
  when: kibana_client_secret is undefined or kibana_client_secret|length<1

- name: get admin user id
  uri:
    url: "https://keycloak.{{ clusterTLDomain }}/auth/admin/realms/{{ clusterTLDomain }}/users"
    validate_certs: false
    method: GET
    headers:
      Authorization: "bearer {{ bearertoken.json.access_token }}"
      Content-Type: application/json
  register: userids

- name: get admin role id
  uri:
    url: "https://keycloak.{{ clusterTLDomain }}/auth/admin/realms/{{ clusterTLDomain }}/clients/{{ clientids.json | json_query(query) | first }}/roles"
    validate_certs: false
    method: GET
    headers:
      Authorization: "bearer {{ bearertoken.json.access_token }}"
      Content-Type: application/json
  register: roleids

- set_fact:
    roleid: "{{ roleids.json | json_query(\"[?name=='admin'].id\") | first }}"
- name: map user to role
  #ignore_errors: true
  uri:
    url: "https://keycloak.{{ clusterTLDomain }}/auth/admin/realms/{{ clusterTLDomain }}/users/{{ userids.json | json_query(\"[?username=='admin'].id\") | first }}/role-mappings/clients/{{ clientids.json | json_query(query) | first }}"
    validate_certs: false
    headers:
      Authorization: "bearer {{ bearertoken.json.access_token }}"
      Content-Type: application/json
    method: POST
    body_format: json
    status_code: 204
    body: '[ 
      { 
        "id": "{{ roleid }}",
        "name": "admin",
        "composite": false,
        "clientRole": true
      }
      ]'

- name: apply kibana configmaps
  k8s:
    state: present     
    definition: "{{ lookup('template', 'gatekeeper-config.yml.j2') | from_yaml }}"
- name: apply kibana configmaps
  k8s:
    state: present     
    definition: "{{ lookup('template', 'gatekeeper-files.yml.j2') | from_yaml }}"

- name: restart grafana to get latest configmap
  command: kubectl delete po -n monitoring -l app=kibana

- name: get admin password
  k8s_info:
    kind: Secret
    namespace: "{{ keycloak.namespace }}"
    name: credential-admin-keycloak
  register: usercred

- name: patch kibanadeployment
  command: >
    kubectl patch deploy -n kube-logging kibana --patch '{"spec": {"template": {"spec": {"containers": [{"name": "kibana","ports": null}]}}}}'
- name: patch kibanasvc
  command: >
    kubectl patch svc -n kube-logging kibana --patch '{"spec": {"ports": [{"name": "http", "port": 5601, "protocol": "TCP", "targetPort": "gatekeeper" }]}}'

- name: apply kibana patch
  command: >
    kubectl patch deploy -n kube-logging kibana --patch "{{ lookup('template', 'kibana-patch.yml.j2') }}"


- debug: 
    msg: "admin password for kibana:  {{ usercred.resources[0].data.ADMIN_PASSWORD | b64decode }}"

