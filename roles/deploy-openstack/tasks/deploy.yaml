---
- name: "{{item.name}} | load cinder keyring"
  shell: "kubectl get secret -n {{openstack.namespace}} cinder-volume-rbd-keyring -o json |jq -r '.data.key'|base64 -d"
  register: ceph_cinder_keyring
  when: openstack[item.name]['enabled'] and "{{item.name}}" == "nova"

- name: "{{item.name}} | deploy helm chart"
  community.kubernetes.helm:
    name: "{{ item.name }}"
    chart_ref: "vanillastack/{{ openstack[item.name]['chartName'] }}"
    chart_version: "{{ openstack[item.name]['chartVersion'] }}"
    release_namespace: "{{openstack.namespace}}"
    values: "{{ lookup('template', '{{item.name}}.yaml.j2') | from_yaml }}"
    update_repo_cache: yes
  when: openstack[item.name]['enabled'] and item.name != "placement"
  retries: 3
  delay: 10

- name: "{{item.name}} | deploy helm chart"
  community.kubernetes.helm:
    name: "{{ item.name }}"
    chart_ref: "vanillastack/{{ openstack[item.name]['chartName'] }}"
    chart_version: "{{ openstack[item.name]['chartVersion'] }}"
    release_namespace: "{{openstack.namespace}}"
    values: "{{ lookup('template', '{{item.name}}.yaml.j2') | from_yaml }}"
    update_repo_cache: yes
  when: openstack[item.name]['enabled'] and item.name == "placement" and openstack.release != "stein"
  retries: 3
  delay: 10

- name: "{{item.name}} | remove svc"
  k8s:
    namespace: "{{openstack.namespace}}"
    kind: Service
    name: "{{item.name}}"
    api_version: v1
    state: absent
  when: openstack[item.name]['enabled'] and openstack[item.name]['createService']

- name: "{{item.name}} | deploy svc"
  k8s:
    definition: "{{ lookup('template', 'svc.yaml.j2') | from_yaml }}"
    state: present
  when: openstack[item.name]['enabled'] and openstack[item.name]['createService']

- name: "{{item.name}} | remove metadata svc"
  k8s:
    namespace: "{{openstack.namespace}}"
    kind: Service
    name: "metadata"
    api_version: v1
    state: absent
  when: openstack[item.name]['enabled'] and openstack[item.name]['createService']

- name: get nova-metadata svc ip
  shell: "kubectl get svc nova-metadata -n {{openstack.namespace}}|grep metadata|tr -s ' '|cut -d' ' -f3"
  register: nova_metadata_ip
  when: openstack[item.name]['enabled'] and openstack[item.name]['createService'] and item.name == "nova"

- name: "{{item.name}} | deploy metadata svc"
  k8s:
    definition: "{{ lookup('template', 'svc_metadata.yaml.j2') | from_yaml }}"
    state: present
  when: openstack[item.name]['enabled'] and openstack[item.name]['createService'] and item.name == "nova"

- name: "{{item.name}} | deploy metadata endpoint"
  k8s:
    definition: "{{ lookup('template', 'endpoint_metadata.yaml.j2') | from_yaml }}"
    state: present
  when: openstack[item.name]['enabled'] and openstack[item.name]['createService'] and item.name == "nova"

- name: wait for pods to come up
#  shell: "kubectl wait -n {{openstack.namespace}} --for=condition=Ready pods --selector application={{item.name}} --timeout=10s  --selector '!job-name'"
  when: item.wait
  retries: 120
  delay: 10
  shell: kubectl get pods -o json -n "{{openstack.namespace}}" --field-selector=status.phase!=Succeeded
  register: kubectl_get_pods
  until: kubectl_get_pods.stdout|from_json|json_query('items[*].status.phase')|unique == ["Running"]
