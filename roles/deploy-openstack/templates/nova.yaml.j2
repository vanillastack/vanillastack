---
{% if openstack.release == "stein" and commercial.enabled != true  %}
images:
  tags:
    bootstrap: docker.io/openstackhelm/heat:stein-ubuntu_bionic
    db_drop: docker.io/openstackhelm/heat:stein-ubuntu_bionic
    db_init: docker.io/openstackhelm/heat:stein-ubuntu_bionic
    dep_check: 'quay.io/airshipit/kubernetes-entrypoint:v1.0.0'
    rabbit_init: docker.io/rabbitmq:3.7-management
    ks_user: docker.io/openstackhelm/heat:stein-ubuntu_bionic
    ks_service: docker.io/openstackhelm/heat:stein-ubuntu_bionic
    ks_endpoints: docker.io/openstackhelm/heat:stein-ubuntu_bionic
    nova_api: docker.io/openstackhelm/nova:stein-ubuntu_bionic
    nova_cell_setup: docker.io/openstackhelm/nova:stein-ubuntu_bionic
    nova_cell_setup_init: docker.io/openstackhelm/heat:stein-ubuntu_bionic
    nova_compute: docker.io/openstackhelm/nova:stein-ubuntu_bionic
    nova_compute_ironic: 'docker.io/kolla/ubuntu-source-nova-compute-ironic:stein'
    nova_compute_ssh: docker.io/openstackhelm/nova:stein-ubuntu_bionic
    nova_conductor: docker.io/openstackhelm/nova:stein-ubuntu_bionic
    nova_consoleauth: docker.io/openstackhelm/nova:stein-ubuntu_bionic
    nova_db_sync: docker.io/openstackhelm/nova:stein-ubuntu_bionic
    nova_novncproxy: docker.io/openstackhelm/nova:stein-ubuntu_bionic
    nova_novncproxy_assets: 'docker.io/kolla/ubuntu-source-nova-novncproxy:stein'
    nova_placement: docker.io/openstackhelm/nova:stein-ubuntu_bionic
    nova_scheduler: docker.io/openstackhelm/nova:stein-ubuntu_bionic
    # NOTE(portdirect): we simply use the ceph config helper here,
    # as it has both oscli and jq.
    nova_service_cleaner: 'docker.io/openstackhelm/ceph-config-helper:latest-ubuntu_bionic'
    nova_spiceproxy: docker.io/openstackhelm/nova:stein-ubuntu_bionic
    nova_spiceproxy_assets: docker.io/openstackhelm/nova:stein-ubuntu_bionic
    test: docker.io/xrally/xrally-openstack:2.0.0
    image_repo_sync: docker.io/docker:17.07.0
    nova_wait_for_computes_init: gcr.io/google_containers/hyperkube-amd64:v1.11.6
{% endif %}
{% if openstack.release == "stein" and commercial.enabled %}
images:
  tags:
    bootstrap: {{repositories.registry_commercial}}/vanillastack/heat:stein-ubuntu_bionic
    db_drop: {{repositories.registry_commercial}}/vanillastack/heat:stein-ubuntu_bionic
    db_init: {{repositories.registry_commercial}}/vanillastack/heat:stein-ubuntu_bionic
    dep_check: '{{repositories.registry_commercial}}/vanillastack/kubernetes-entrypoint:v1.0.0'
    rabbit_init: {{repositories.registry_commercial}}/vanillastack/rabbitmq:3.7-management
    ks_user: {{repositories.registry_commercial}}/vanillastack/heat:stein-ubuntu_bionic
    ks_service: {{repositories.registry_commercial}}/vanillastack/heat:stein-ubuntu_bionic
    ks_endpoints: {{repositories.registry_commercial}}/vanillastack/heat:stein-ubuntu_bionic
    nova_api: {{repositories.registry_commercial}}/vanillastack/nova:stein-ubuntu_bionic
    nova_cell_setup: {{repositories.registry_commercial}}/vanillastack/nova:stein-ubuntu_bionic
    nova_cell_setup_init: {{repositories.registry_commercial}}/vanillastack/heat:stein-ubuntu_bionic
    nova_compute: {{repositories.registry_commercial}}/vanillastack/nova:stein-ubuntu_bionic
    nova_compute_ironic: '{{repositories.registry_commercial}}/vanillastack/ubuntu-source-nova-compute-ironic:stein'
    nova_compute_ssh: {{repositories.registry_commercial}}/vanillastack/nova:stein-ubuntu_bionic
    nova_conductor: {{repositories.registry_commercial}}/vanillastack/nova:stein-ubuntu_bionic
    nova_consoleauth: {{repositories.registry_commercial}}/vanillastack/nova:stein-ubuntu_bionic
    nova_db_sync: {{repositories.registry_commercial}}/vanillastack/nova:stein-ubuntu_bionic
    nova_novncproxy: {{repositories.registry_commercial}}/vanillastack/nova:stein-ubuntu_bionic
    nova_novncproxy_assets: '{{repositories.registry_commercial}}/vanillastack/ubuntu-source-nova-novncproxy:stein'
    nova_placement: {{repositories.registry_commercial}}/vanillastack/nova:stein-ubuntu_bionic
    nova_scheduler: {{repositories.registry_commercial}}/vanillastack/nova:stein-ubuntu_bionic
    # NOTE(portdirect): we simply use the ceph config helper here,
    # as it has both oscli and jq.
    nova_service_cleaner: '{{repositories.registry_commercial}}/vanillastack/ceph-config-helper:latest-ubuntu_bionic'
    nova_spiceproxy: {{repositories.registry_commercial}}/vanillastack/nova:stein-ubuntu_bionic
    nova_spiceproxy_assets: {{repositories.registry_commercial}}/vanillastack/nova:stein-ubuntu_bionic
    test: {{repositories.registry_commercial}}/vanillastack/xrally-openstack:2.0.0
    nova_wait_for_computes_init: {{repositories.registry_commercial}}/vanillastack/hyperkube-amd64:v1.11.6
    image_repo_sync: {{repositories.registry_commercial}}/vanillastack/docker:17.07.0
{% endif %}
{% if openstack.release == "train" and commercial.enabled != true  %}
images:
  tags:
    bootstrap: docker.io/openstackhelm/heat:train-ubuntu_bionic
    db_drop: docker.io/openstackhelm/heat:train-ubuntu_bionic
    db_init: docker.io/openstackhelm/heat:train-ubuntu_bionic
    dep_check: 'quay.io/airshipit/kubernetes-entrypoint:v1.0.0'
    rabbit_init: docker.io/rabbitmq:3.7-management
    ks_user: docker.io/openstackhelm/heat:train-ubuntu_bionic
    ks_service: docker.io/openstackhelm/heat:train-ubuntu_bionic
    ks_endpoints: docker.io/openstackhelm/heat:train-ubuntu_bionic
    nova_api: docker.io/openstackhelm/nova:train-ubuntu_bionic
    nova_cell_setup: docker.io/openstackhelm/nova:train-ubuntu_bionic
    nova_cell_setup_init: docker.io/openstackhelm/heat:train-ubuntu_bionic
    nova_compute: docker.io/openstackhelm/nova:train-ubuntu_bionic
    nova_compute_ironic: 'docker.io/kolla/ubuntu-source-nova-compute-ironic:train'
    nova_compute_ssh: docker.io/openstackhelm/nova:train-ubuntu_bionic
    nova_conductor: docker.io/openstackhelm/nova:train-ubuntu_bionic
    nova_consoleauth: docker.io/openstackhelm/nova:train-ubuntu_bionic
    nova_db_sync: docker.io/openstackhelm/nova:train-ubuntu_bionic
    nova_novncproxy: docker.io/openstackhelm/nova:train-ubuntu_bionic
    nova_novncproxy_assets: 'docker.io/kolla/ubuntu-source-nova-novncproxy:train'
    nova_placement: docker.io/openstackhelm/nova:train-ubuntu_bionic
    nova_scheduler: docker.io/openstackhelm/nova:train-ubuntu_bionic
    # NOTE(portdirect): we simply use the ceph config helper here,
    # as it has both oscli and jq.
    nova_service_cleaner: 'docker.io/openstackhelm/ceph-config-helper:latest-ubuntu_bionic'
    nova_spiceproxy: docker.io/openstackhelm/nova:train-ubuntu_bionic
    nova_spiceproxy_assets: docker.io/openstackhelm/nova:train-ubuntu_bionic
    test: docker.io/xrally/xrally-openstack:2.0.0
    image_repo_sync: docker.io/docker:17.07.0
    nova_wait_for_computes_init: gcr.io/google_containers/hyperkube-amd64:v1.11.6
{% endif %}
{% if openstack.release == "train" and commercial.enabled %}
images:
  tags:
    bootstrap: {{repositories.registry_commercial}}/vanillastack/heat:train-ubuntu_bionic
    db_drop: {{repositories.registry_commercial}}/vanillastack/heat:train-ubuntu_bionic
    db_init: {{repositories.registry_commercial}}/vanillastack/heat:train-ubuntu_bionic
    dep_check: '{{repositories.registry_commercial}}/vanillastack/kubernetes-entrypoint:v1.0.0'
    rabbit_init: {{repositories.registry_commercial}}/vanillastack/rabbitmq:3.7-management
    ks_user: {{repositories.registry_commercial}}/vanillastack/heat:train-ubuntu_bionic
    ks_service: {{repositories.registry_commercial}}/vanillastack/heat:train-ubuntu_bionic
    ks_endpoints: {{repositories.registry_commercial}}/vanillastack/heat:train-ubuntu_bionic
    nova_api: {{repositories.registry_commercial}}/vanillastack/nova:train-ubuntu_bionic
    nova_cell_setup: {{repositories.registry_commercial}}/vanillastack/nova:train-ubuntu_bionic
    nova_cell_setup_init: {{repositories.registry_commercial}}/vanillastack/heat:train-ubuntu_bionic
    nova_compute: {{repositories.registry_commercial}}/vanillastack/nova:train-ubuntu_bionic
    nova_compute_ironic: '{{repositories.registry_commercial}}/vanillastack/ubuntu-source-nova-compute-ironic:train'
    nova_compute_ssh: {{repositories.registry_commercial}}/vanillastack/nova:train-ubuntu_bionic
    nova_conductor: {{repositories.registry_commercial}}/vanillastack/nova:train-ubuntu_bionic
    nova_consoleauth: {{repositories.registry_commercial}}/vanillastack/nova:train-ubuntu_bionic
    nova_db_sync: {{repositories.registry_commercial}}/vanillastack/nova:train-ubuntu_bionic
    nova_novncproxy: {{repositories.registry_commercial}}/vanillastack/nova:train-ubuntu_bionic
    nova_novncproxy_assets: '{{repositories.registry_commercial}}/vanillastack/ubuntu-source-nova-novncproxy:train'
    nova_placement: {{repositories.registry_commercial}}/vanillastack/nova:train-ubuntu_bionic
    nova_scheduler: {{repositories.registry_commercial}}/vanillastack/nova:train-ubuntu_bionic
    # NOTE(portdirect): we simply use the ceph config helper here,
    # as it has both oscli and jq.
    nova_service_cleaner: '{{repositories.registry_commercial}}/vanillastack/ceph-config-helper:latest-ubuntu_bionic'
    nova_spiceproxy: {{repositories.registry_commercial}}/vanillastack/nova:train-ubuntu_bionic
    nova_spiceproxy_assets: {{repositories.registry_commercial}}/vanillastack/nova:train-ubuntu_bionic
    test: {{repositories.registry_commercial}}/vanillastack/xrally-openstack:2.0.0
    nova_wait_for_computes_init: {{repositories.registry_commercial}}/vanillastack/hyperkube-amd64:v1.11.6
    image_repo_sync: {{repositories.registry_commercial}}/vanillastack/docker:17.07.0
{% endif %}
{% if openstack.release == "ussuri" and commercial.enabled != true  %}
images:
  tags:
    bootstrap: docker.io/openstackhelm/heat:ussuri-ubuntu_bionic
    db_drop: docker.io/openstackhelm/heat:ussuri-ubuntu_bionic
    db_init: docker.io/openstackhelm/heat:ussuri-ubuntu_bionic
    dep_check: 'quay.io/airshipit/kubernetes-entrypoint:v1.0.0'
    rabbit_init: docker.io/rabbitmq:3.7-management
    ks_user: docker.io/openstackhelm/heat:ussuri-ubuntu_bionic
    ks_service: docker.io/openstackhelm/heat:ussuri-ubuntu_bionic
    ks_endpoints: docker.io/openstackhelm/heat:ussuri-ubuntu_bionic
    nova_api: docker.io/openstackhelm/nova:ussuri-ubuntu_bionic
    nova_cell_setup: docker.io/openstackhelm/nova:ussuri-ubuntu_bionic
    nova_cell_setup_init: docker.io/openstackhelm/heat:ussuri-ubuntu_bionic
    nova_compute: docker.io/openstackhelm/nova:ussuri-ubuntu_bionic
    nova_compute_ironic: 'docker.io/kolla/ubuntu-source-nova-compute-ironic:ussuri'
    nova_compute_ssh: docker.io/openstackhelm/nova:ussuri-ubuntu_bionic
    nova_conductor: docker.io/openstackhelm/nova:ussuri-ubuntu_bionic
    nova_consoleauth: docker.io/openstackhelm/nova:ussuri-ubuntu_bionic
    nova_db_sync: docker.io/openstackhelm/nova:ussuri-ubuntu_bionic
    nova_novncproxy: docker.io/openstackhelm/nova:ussuri-ubuntu_bionic
    nova_novncproxy_assets: 'docker.io/kolla/ubuntu-source-nova-novncproxy:ussuri'
    nova_placement: docker.io/openstackhelm/nova:ussuri-ubuntu_bionic
    nova_scheduler: docker.io/openstackhelm/nova:ussuri-ubuntu_bionic
    # NOTE(portdirect): we simply use the ceph config helper here,
    # as it has both oscli and jq.
    nova_service_cleaner: 'docker.io/openstackhelm/ceph-config-helper:latest-ubuntu_bionic'
    nova_spiceproxy: docker.io/openstackhelm/nova:ussuri-ubuntu_bionic
    nova_spiceproxy_assets: docker.io/openstackhelm/nova:ussuri-ubuntu_bionic
    test: docker.io/xrally/xrally-openstack:2.0.0
    image_repo_sync: docker.io/docker:17.07.0
    nova_wait_for_computes_init: gcr.io/google_containers/hyperkube-amd64:v1.11.6
{% endif %}
{% if openstack.release == "ussuri" and commercial.enabled %}
images:
  tags:
    bootstrap: {{repositories.registry_commercial}}/vanillastack/heat:ussuri-ubuntu_bionic
    db_drop: {{repositories.registry_commercial}}/vanillastack/heat:ussuri-ubuntu_bionic
    db_init: {{repositories.registry_commercial}}/vanillastack/heat:ussuri-ubuntu_bionic
    dep_check: '{{repositories.registry_commercial}}/vanillastack/kubernetes-entrypoint:v1.0.0'
    rabbit_init: {{repositories.registry_commercial}}/vanillastack/rabbitmq:3.7-management
    ks_user: {{repositories.registry_commercial}}/vanillastack/heat:ussuri-ubuntu_bionic
    ks_service: {{repositories.registry_commercial}}/vanillastack/heat:ussuri-ubuntu_bionic
    ks_endpoints: {{repositories.registry_commercial}}/vanillastack/heat:ussuri-ubuntu_bionic
    nova_api: {{repositories.registry_commercial}}/vanillastack/nova:ussuri-ubuntu_bionic
    nova_cell_setup: {{repositories.registry_commercial}}/vanillastack/nova:ussuri-ubuntu_bionic
    nova_cell_setup_init: {{repositories.registry_commercial}}/vanillastack/heat:ussuri-ubuntu_bionic
    nova_compute: {{repositories.registry_commercial}}/vanillastack/nova:ussuri-ubuntu_bionic
    nova_compute_ironic: '{{repositories.registry_commercial}}/vanillastack/ubuntu-source-nova-compute-ironic:ussuri'
    nova_compute_ssh: {{repositories.registry_commercial}}/vanillastack/nova:ussuri-ubuntu_bionic
    nova_conductor: {{repositories.registry_commercial}}/vanillastack/nova:ussuri-ubuntu_bionic
    nova_consoleauth: {{repositories.registry_commercial}}/vanillastack/nova:ussuri-ubuntu_bionic
    nova_db_sync: {{repositories.registry_commercial}}/vanillastack/nova:ussuri-ubuntu_bionic
    nova_novncproxy: {{repositories.registry_commercial}}/vanillastack/nova:ussuri-ubuntu_bionic
    nova_novncproxy_assets: '{{repositories.registry_commercial}}/vanillastack/ubuntu-source-nova-novncproxy:ussuri'
    nova_placement: {{repositories.registry_commercial}}/vanillastack/nova:ussuri-ubuntu_bionic
    nova_scheduler: {{repositories.registry_commercial}}/vanillastack/nova:ussuri-ubuntu_bionic
    # NOTE(portdirect): we simply use the ceph config helper here,
    # as it has both oscli and jq.
    nova_service_cleaner: '{{repositories.registry_commercial}}/vanillastack/ceph-config-helper:latest-ubuntu_bionic'
    nova_spiceproxy: {{repositories.registry_commercial}}/vanillastack/nova:ussuri-ubuntu_bionic
    nova_spiceproxy_assets: {{repositories.registry_commercial}}/vanillastack/nova:ussuri-ubuntu_bionic
    test: {{repositories.registry_commercial}}/vanillastack/xrally-openstack:2.0.0
    nova_wait_for_computes_init: {{repositories.registry_commercial}}/vanillastack/hyperkube-amd64:v1.11.6
    image_repo_sync: {{repositories.registry_commercial}}/vanillastack/docker:17.07.0
{% endif %}
{% if openstack.release == "victoria" and commercial.enabled %}
images:
  tags:
    bootstrap: {{repositories.registry_commercial}}/vanillastack/ubuntu-source-heat-base:victoria_20201215
    db_drop: {{repositories.registry_commercial}}/vanillastack/ubuntu-source-heat-base:victoria_20201215
    db_init: {{repositories.registry_commercial}}/vanillastack/ubuntu-source-heat-base:victoria_20201215
    dep_check: '{{repositories.registry_commercial}}/vanillastack/kubernetes-entrypoint:v1.0.0'
    rabbit_init: {{repositories.registry_commercial}}/vanillastack/rabbitmq:3.7-management
    ks_user: {{repositories.registry_commercial}}/vanillastack/ubuntu-source-heat-base:victoria_20201215
    ks_service: {{repositories.registry_commercial}}/vanillastack/ubuntu-source-heat-base:victoria_20201215
    ks_endpoints: {{repositories.registry_commercial}}/vanillastack/ubuntu-source-heat-base:victoria_20201215
    nova_api: {{repositories.registry_commercial}}/vanillastack/ubuntu-source-nova-api:victoria_20201215
    nova_cell_setup: {{repositories.registry_commercial}}/vanillastack/ubuntu-source-nova-base:victoria_20201215
    nova_cell_setup_init: {{repositories.registry_commercial}}/vanillastack/ubuntu-source-nova-base:victoria_20201215
    nova_compute: {{repositories.registry_commercial}}/vanillastack/ubuntu-source-nova-compute:victoria_20201215
    nova_compute_ironic: {{repositories.registry_commercial}}/vanillastack/ubuntu-source-nova-compute-ironic:victoria_20201215
    nova_compute_ssh: {{repositories.registry_commercial}}/vanillastack/ubuntu-source-nova-ssh:victoria_20201215
    nova_conductor: {{repositories.registry_commercial}}/vanillastack/ubuntu-source-nova-conductor:victoria_20201215
    nova_consoleauth: {{repositories.registry_commercial}}/vanillastack/ubuntu-source-nova-base:victoria_20201215
    nova_db_sync: {{repositories.registry_commercial}}/vanillastack/ubuntu-source-nova-base:victoria_20201215
    nova_novncproxy: {{repositories.registry_commercial}}/vanillastack/ubuntu-source-nova-novncproxy:victoria_20201215
    nova_novncproxy_assets: {{repositories.registry_commercial}}/vanillastack/ubuntu-source-nova-novncproxy:victoria_20201215
    nova_placement: {{repositories.registry_commercial}}/vanillastack/ubuntu-source-placement:victoria_20201215
    nova_scheduler: {{repositories.registry_commercial}}/vanillastack/ubuntu-source-nova-scheduler:victoria_20201215
    # NOTE(portdirect): we simply use the ceph config helper here,
    # as it has both oscli and jq.
    nova_service_cleaner: '{{repositories.registry_commercial}}/vanillastack/ceph-config-helper:latest-ubuntu_bionic'
    nova_spiceproxy: {{repositories.registry_commercial}}/vanillastack/ubuntu-source-nova-spicehtml5proxy:victoria_20201215
    nova_spiceproxy_assets: {{repositories.registry_commercial}}/vanillastack/ubuntu-source-spicehtml5proxy:victoria_20201215
    test: {{repositories.registry_commercial}}/vanillastack/ubuntu-source-rally:victoria_20201215
    nova_wait_for_computes_init: {{repositories.registry_commercial}}/vanillastack/hyperkube-amd64:v1.11.6
    image_repo_sync: {{repositories.registry_commercial}}/vanillastack/docker:17.07.0
{% endif %}
labels:
  api_metadata:
    node_selector_key: openstack-compute-node
    node_selector_value: enabled
pod:
  use_fqdn:
    compute: false
  replicas:
    api_metadata: {{openstack.nova.apiMetadata.replicas}}
    placement: {{openstack.nova.placement.replicas}}
    osapi: {{openstack.nova.osapi.replicas}}
    conductor: {{openstack.nova.conductor.replicas}}
    consoleauth: {{openstack.nova.consoleauth.replicas}}
    scheduler: {{openstack.nova.scheduler.replicas}}
    novncproxy: {{openstack.nova.novncproxy.replicas}}
endpoints:
  compute:
    host_fqdn_override:
      public:
        host: {{openstack.nova.endpoints.publicURLPrefix}}.{{openstack.publicDomain}}
{% if openstack.tls.enabled and openstack.tls.useCertManager %}
        tls:
          key: dummy
          crt: dummy
{% if LE_issuer_name == "letsencrypt-staging" %}
          ca: |
{{tls.staging.rootCACert |b64decode| indent( width=12, indentfirst=True) }}
{% elif LE_issuer_name == "letsencrypt-prod" %}
          ca: |
{{tls.prod.rootCACert | b64decode | indent( width=12, indentfirst=True) }}
{% elif LE_issuer_name == "certmanager-selfsigned" %}
          ca: |
{{selfSignedCA | b64decode | indent( width=12, indentfirst=True) }}
{% endif %}
{% endif %}
    scheme:
      default: http
{% if openstack.tls.enabled %}
      public: https
    port:
      api:
        public: 443
{% endif %}
{% if openstack.tls.enabled and openstack.tls.useCertManager %}
    certs:
      nova:
        secretName: nova-tls
        issuerRef:
          name: openstack-{{LE_issuer_name}}
          kind: Issuer
{% endif %}
  compute_novnc_proxy:
    host_fqdn_override:
      public:
        host: {{openstack.nova.endpoints.novncURLPrefix}}.{{openstack.publicDomain}}
{% if openstack.tls.enabled and openstack.tls.useCertManager %}
        tls:
          key: dummy
          crt: dummy
{% if LE_issuer_name == "letsencrypt-staging" %}
          ca: |
{{tls.staging.rootCACert |b64decode| indent( width=12, indentfirst=True) }}
{% elif LE_issuer_name == "letsencrypt-prod" %}
          ca: |
{{tls.prod.rootCACert | b64decode | indent( width=12, indentfirst=True) }}
{% elif LE_issuer_name == "certmanager-selfsigned" %}
          ca: |
{{selfSignedCA | b64decode | indent( width=12, indentfirst=True) }}
{% endif %}
{% endif %}
    scheme:
      default: http
{% if openstack.tls.enabled %}
      public: https
    port:
      api:
        public: 443
{% endif %}
{% if openstack.tls.enabled and openstack.tls.useCertManager %}
    certs:
      nova:
        secretName: nova-tls
        issuerRef:
          name: openstack-{{LE_issuer_name}}
          kind: Issuer
{% endif %}
{% if openstack.release == "stein" %}
  placement:
    host_fqdn_override:
      public:
        host: {{openstack.nova.endpoints.placementURLPrefix}}.{{openstack.publicDomain}}
{% if openstack.tls.enabled and openstack.tls.useCertManager %}
        tls:
          key: dummy
          crt: dummy
{% if LE_issuer_name == "letsencrypt-staging" %}
          ca: |
{{tls.staging.rootCACert |b64decode| indent( width=12, indentfirst=True) }}
{% elif LE_issuer_name == "letsencrypt-prod" %}
          ca: |
{{tls.prod.rootCACert | b64decode | indent( width=12, indentfirst=True) }}
{% elif LE_issuer_name == "certmanager-selfsigned" %}
          ca: |
{{selfSignedCA | b64decode | indent( width=12, indentfirst=True) }}
{% endif %}
{% endif %}
    scheme:
      default: http
{% if openstack.tls.enabled %}
      public: https
    port:
      api:
        public: 443
{% endif %}
{% if openstack.tls.enabled and openstack.tls.useCertManager %}
    certs:
      nova:
        secretName: nova-tls
        issuerRef:
          name: openstack-{{LE_issuer_name}}
          kind: Issuer
{% endif %}
{% endif %}
  oslo_db:
    auth:
      admin:
        username: root
        password: {{openstack.mariadb.auth.admin.password}}
        secret:
          tls:
            internal: mariadb-tls-direct
      nova:
        username: nova
        password: {{openstack.nova.auth.db.password}}
  oslo_db_api:
    auth:
      admin:
        username: root
        password: {{openstack.mariadb.auth.admin.password}}
      nova:
        username: nova
        password: {{openstack.nova.auth.db.password}}
  oslo_db_cell0:
    auth:
      admin:
        username: root
        password: {{openstack.mariadb.auth.admin.password}}
      nova:
        username: nova
        password: {{openstack.nova.auth.db.password}}
  oslo_messaging:
    auth:
      admin:
        username: rabbitmq
        password: {{openstack.rabbitmq.auth.admin.password}}
      nova:
        username: nova
        password: {{openstack.nova.auth.messaging.password}}
  identity:
    name: keystone
    auth:
{% if openstack.tls.enabled %}
      cacert: /tmp/openstack_ca.crt
{% endif %}
      admin:
        region_name: {{openstack.region}}
        username: admin
        password: {{openstack.keystone.auth.admin.password}}
        project_name: admin
        user_domain_name: default
        project_domain_name: default
      nova:
        role: admin
        region_name: {{openstack.region}}
        username: nova
        password: {{openstack.nova.auth.service.password}}
        project_name: service
        user_domain_name: service
        project_domain_name: service
      neutron:
        region_name: {{openstack.region}}
        project_name: service
        user_domain_name: service
        project_domain_name: service
        username: neutron
        password: {{openstack.neutron.auth.service.password}}
      ironic:
        auth_type: password
        auth_version: v3
        region_name: {{openstack.region}}
        project_name: service
        user_domain_name: service
        project_domain_name: service
        username: ironic
        password: {{openstack.ironic.auth.service.password}}
      placement:
        role: admin
        region_name: {{openstack.region}}
        username: placement
{% if openstack.release == "stein" %}
        password: {{openstack.nova.auth.placement.password}}
{% else %}
        password: {{openstack.placement.auth.service.password}}
{% endif %}
        project_name: service
        user_domain_name: service
        project_domain_name: service
      test:
        role: admin
        region_name: {{openstack.region}}
        username: nova-test
        password: {{openstack.nova.auth.novaTest.password}}
        project_name: test
        user_domain_name: service
        project_domain_name: service

{% if openstack.ceph.enabled %}
conf:
  nova:
    libvirt:
      cpu_mode: {{openstack.nova.libvirt.cpuMode}}
      virt_type: {{openstack.nova.libvirt.virtType}}
  ceph:
    enabled: {{openstack.ceph.enabled}}
    admin_keyring: null
    cinder:
      user:  {{openstack.cinder.rbd.rbdUser}}
      keyring: "{{ceph_cinder_keyring.stdout}}"
      secret_uuid: 457eb676-33da-42ec-9a8c-9293d545c337
ceph_client:
  user_secret_name: cinder-volume-rbd-keyring
{% endif %}
network:
  osapi:
    ingress:
      public: true
      classes:
        namespace: "nginx"
        cluster: "nginx-cluster"
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /
        kubernetes.io/ingress.class: nginx
{% if openstack.tls.enabled and openstack.tls.useCertManager %}
        kubernetes.io/tls-acme: "true"
#        nginx.ingress.kubernetes.io/backend-protocol: "https"
{% endif %}
{% if openstack.tls.enabled and openstack.tls.useCertManager %}
        cert-manager.io/issuer: "openstack-{{LE_issuer_name}}"
{% endif %}
  novncproxy:
    ingress:
      public: true
      classes:
        namespace: "nginx"
        cluster: "nginx-cluster"
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /
        kubernetes.io/ingress.class: nginx
{% if openstack.tls.enabled and openstack.tls.useCertManager %}
        kubernetes.io/tls-acme: "true"
#        nginx.ingress.kubernetes.io/backend-protocol: "https"
{% endif %}
{% if openstack.tls.enabled and openstack.tls.useCertManager %}
        cert-manager.io/issuer: "openstack-{{LE_issuer_name}}"
{% endif %}
{% if openstack.release == "stein" %}
  placement:
    ingress:
      public: true
      classes:
        namespace: "nginx"
        cluster: "nginx-cluster"
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /
        kubernetes.io/ingress.class: nginx
{% if openstack.tls.enabled and openstack.tls.useCertManager %}
        kubernetes.io/tls-acme: "true"
#        nginx.ingress.kubernetes.io/backend-protocol: "https"
{% endif %}
{% if openstack.tls.enabled and openstack.tls.useCertManager %}
        cert-manager.io/issuer: "openstack-{{LE_issuer_name}}"
{% endif %}
{% endif %}

manifests:
  secret_ingress_tls: false
  cron_job_cell_setup: false
  cron_job_service_cleaner: false
  statefulset_compute_ironic: false
  deployment_consoleauth: false
  deployment_placement: false
  ingress_placement: false
  job_db_init_placement: false
  job_ks_placement_endpoints: false
  job_ks_placement_service: false
  job_ks_placement_user: false
  pdb_placement: false
  secret_keystone_placement: false
  service_ingress_placement: false
  service_placement: false
