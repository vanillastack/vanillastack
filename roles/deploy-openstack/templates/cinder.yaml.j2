---
{% if openstack.release == "stein" and commercial.enabled %}
images:
  tags:
    test: {{repositories.registry_commercial}}/vanillastack/xrally-openstack:2.0.0
    db_init: {{repositories.registry_commercial}}/vanillastack/heat:stein-ubuntu_bionic
    cinder_db_sync: {{repositories.registry_commercial}}/vanillastack/cinder:stein-ubuntu_bionic
    db_drop: {{repositories.registry_commercial}}/vanillastack/heat:stein-ubuntu_bionic
    rabbit_init: {{repositories.registry_commercial}}/vanillastack/rabbitmq:3.7-management
    ks_user: {{repositories.registry_commercial}}/vanillastack/heat:stein-ubuntu_bionic
    ks_service: {{repositories.registry_commercial}}/vanillastack/heat:stein-ubuntu_bionic
    ks_endpoints: {{repositories.registry_commercial}}/vanillastack/heat:stein-ubuntu_bionic
    cinder_api: {{repositories.registry_commercial}}/vanillastack/cinder:stein-ubuntu_bionic
    bootstrap: {{repositories.registry_commercial}}/vanillastack/heat:stein-ubuntu_bionic
    cinder_scheduler: {{repositories.registry_commercial}}/vanillastack/cinder:stein-ubuntu_bionic
    cinder_volume: {{repositories.registry_commercial}}/vanillastack/cinder:stein-ubuntu_bionic
    cinder_volume_usage_audit: {{repositories.registry_commercial}}/vanillastack/cinder:stein-ubuntu_bionic
    cinder_storage_init: {{repositories.registry_commercial}}/vanillastack/ceph-config-helper:latest-ubuntu_bionic
    cinder_backup: {{repositories.registry_commercial}}/vanillastack/cinder:stein-ubuntu_bionic
    cinder_backup_storage_init: {{repositories.registry_commercial}}/vanillastack/ceph-config-helper:latest-ubuntu_bionic
    dep_check: {{repositories.registry_commercial}}/vanillastack/kubernetes-entrypoint:v1.0.0
    image_repo_sync: {{repositories.registry_commercial}}/vanillastack/docker:17.07.0
{% endif %}
{% if openstack.release == "stein" and commercial.enabled != true %}
images:
  tags:
    test: docker.io/xrally/xrally-openstack:2.0.0
    db_init: docker.io/openstackhelm/heat:stein-ubuntu_bionic
    cinder_db_sync: docker.io/openstackhelm/cinder:stein-ubuntu_bionic
    db_drop: docker.io/openstackhelm/heat:stein-ubuntu_bionic
    rabbit_init: docker.io/rabbitmq:3.7-management
    ks_user: docker.io/openstackhelm/heat:stein-ubuntu_bionic
    ks_service: docker.io/openstackhelm/heat:stein-ubuntu_bionic
    ks_endpoints: docker.io/openstackhelm/heat:stein-ubuntu_bionic
    cinder_api: docker.io/openstackhelm/cinder:stein-ubuntu_bionic
    bootstrap: docker.io/openstackhelm/heat:stein-ubuntu_bionic
    cinder_scheduler: docker.io/openstackhelm/cinder:stein-ubuntu_bionic
    cinder_volume: harbor.vanillastack.io/vanillastack/cinder:stein-ubuntu_bionic
    cinder_volume_usage_audit: harbor.vanillastack.io/vanillastack/cinder:stein-ubuntu_bionic
    cinder_storage_init: docker.io/openstackhelm/ceph-config-helper:latest-ubuntu_bionic
    cinder_backup: docker.io/openstackhelm/cinder:stein-ubuntu_bionic
    cinder_backup_storage_init: docker.io/openstackhelm/ceph-config-helper:latest-ubuntu_bionic
    dep_check: quay.io/airshipit/kubernetes-entrypoint:v1.0.0
    image_repo_sync: docker.io/docker:17.07.0
{% endif %}
{% if openstack.release == "train" and commercial.enabled %}
images:
  tags:
    test: {{repositories.registry_commercial}}/vanillastack/xrally-openstack:2.0.0
    db_init: {{repositories.registry_commercial}}/vanillastack/heat:train-ubuntu_bionic
    cinder_db_sync: {{repositories.registry_commercial}}/vanillastack/cinder:train-ubuntu_bionic
    db_drop: {{repositories.registry_commercial}}/vanillastack/heat:train-ubuntu_bionic
    ks_user: {{repositories.registry_commercial}}/vanillastack/heat:train-ubuntu_bionic
    ks_service: {{repositories.registry_commercial}}/vanillastack/heat:train-ubuntu_bionic
    ks_endpoints: {{repositories.registry_commercial}}/vanillastack/heat:train-ubuntu_bionic
    cinder_api: {{repositories.registry_commercial}}/vanillastack/cinder:train-ubuntu_bionic
    bootstrap: {{repositories.registry_commercial}}/vanillastack/heat:train-ubuntu_bionic
    cinder_scheduler: {{repositories.registry_commercial}}/vanillastack/cinder:train-ubuntu_bionic
    cinder_volume: {{repositories.registry_commercial}}/vanillastack/cinder:train-ubuntu_bionic
    cinder_volume_usage_audit: {{repositories.registry_commercial}}/vanillastack/cinder:train-ubuntu_bionic
    cinder_storage_init: {{repositories.registry_commercial}}/vanillastack/ceph-config-helper:latest-ubuntu_bionic
    cinder_backup: {{repositories.registry_commercial}}/vanillastack/cinder:train-ubuntu_bionic
    cinder_backup_storage_init: {{repositories.registry_commercial}}/vanillastack/ceph-config-helper:latest-ubuntu_bionic
    dep_check: {{repositories.registry_commercial}}/vanillastack/kubernetes-entrypoint:v1.0.0
    image_repo_sync: {{repositories.registry_commercial}}/vanillastack/docker:17.07.0
{% endif %}
{% if openstack.release == "train" and commercial.enabled != true %}
images:
  tags:
    db_init: "docker.io/openstackhelm/heat:train-ubuntu_bionic"
    cinder_db_sync: "docker.io/openstackhelm/cinder:train-ubuntu_bionic"
    db_drop: "docker.io/openstackhelm/heat:train-ubuntu_bionic"
    ks_user: "docker.io/openstackhelm/heat:train-ubuntu_bionic"
    ks_service: "docker.io/openstackhelm/heat:train-ubuntu_bionic"
    ks_endpoints: "docker.io/openstackhelm/heat:train-ubuntu_bionic"
    cinder_api: "docker.io/openstackhelm/cinder:train-ubuntu_bionic"
    bootstrap: "docker.io/openstackhelm/heat:train-ubuntu_bionic"
    cinder_scheduler: "docker.io/openstackhelm/cinder:train-ubuntu_bionic"
    cinder_volume: harbor.vanillastack.io/vanillastack/cinder:train-ubuntu_bionic
    cinder_volume_usage_audit: harbor.vanillastack.io/vanillastack/cinder:train-ubuntu_bionic
    cinder_storage_init: "docker.io/openstackhelm/ceph-config-helper:latest-ubuntu_bionic"
    cinder_backup: "docker.io/openstackhelm/cinder:train-ubuntu_bionic"
    cinder_backup_storage_init: "docker.io/openstackhelm/ceph-config-helper:latest-ubuntu_bionic"
{% endif %}
{% if openstack.release == "ussuri" and commercial.enabled %}
images:
  tags:
    test: {{repositories.registry_commercial}}/vanillastack/xrally-openstack:2.0.0
    db_init: {{repositories.registry_commercial}}/vanillastack/heat:ussuri-ubuntu_bionic
    cinder_db_sync: {{repositories.registry_commercial}}/vanillastack/cinder:ussuri-ubuntu_bionic
    db_drop: {{repositories.registry_commercial}}/vanillastack/heat:ussuri-ubuntu_bionic
    ks_user: {{repositories.registry_commercial}}/vanillastack/heat:ussuri-ubuntu_bionic
    ks_service: {{repositories.registry_commercial}}/vanillastack/heat:ussuri-ubuntu_bionic
    ks_endpoints: {{repositories.registry_commercial}}/vanillastack/heat:ussuri-ubuntu_bionic
    cinder_api: {{repositories.registry_commercial}}/vanillastack/cinder:ussuri-ubuntu_bionic
    bootstrap: {{repositories.registry_commercial}}/vanillastack/heat:ussuri-ubuntu_bionic
    cinder_scheduler: {{repositories.registry_commercial}}/vanillastack/cinder:ussuri-ubuntu_bionic
    cinder_volume: {{repositories.registry_commercial}}/vanillastack/cinder:ussuri-ubuntu_bionic
    cinder_volume_usage_audit: {{repositories.registry_commercial}}/vanillastack/cinder:ussuri-ubuntu_bionic
    cinder_storage_init: {{repositories.registry_commercial}}/vanillastack/ceph-config-helper:latest-ubuntu_bionic
    cinder_backup: {{repositories.registry_commercial}}/vanillastack/cinder:ussuri-ubuntu_bionic
    cinder_backup_storage_init: {{repositories.registry_commercial}}/vanillastack/ceph-config-helper:latest-ubuntu_bionic
    dep_check: {{repositories.registry_commercial}}/vanillastack/kubernetes-entrypoint:v1.0.0
    image_repo_sync: {{repositories.registry_commercial}}/vanillastack/docker:17.07.0
{% endif %}
{% if openstack.release == "ussuri" and commercial.enabled != true %}
images:
  tags:
    db_init: "docker.io/openstackhelm/heat:ussuri-ubuntu_bionic"
    cinder_db_sync: "docker.io/openstackhelm/cinder:ussuri-ubuntu_bionic"
    db_drop: "docker.io/openstackhelm/heat:ussuri-ubuntu_bionic"
    ks_user: "docker.io/openstackhelm/heat:ussuri-ubuntu_bionic"
    ks_service: "docker.io/openstackhelm/heat:ussuri-ubuntu_bionic"
    ks_endpoints: "docker.io/openstackhelm/heat:ussuri-ubuntu_bionic"
    cinder_api: "docker.io/openstackhelm/cinder:ussuri-ubuntu_bionic"
    bootstrap: "docker.io/openstackhelm/heat:ussuri-ubuntu_bionic"
    cinder_scheduler: "docker.io/openstackhelm/cinder:ussuri-ubuntu_bionic"
    cinder_volume: harbor.vanillastack.io/vanillastack/cinder:ussuri-ubuntu_bionic
    cinder_volume_usage_audit: harbor.vanillastack.io/vanillastack/cinder:ussuri-ubuntu_bionic
    cinder_storage_init: "docker.io/openstackhelm/ceph-config-helper:latest-ubuntu_bionic"
    cinder_backup: "docker.io/openstackhelm/cinder:ussuri-ubuntu_bionic"
    cinder_backup_storage_init: "docker.io/openstackhelm/ceph-config-helper:latest-ubuntu_bionic"
{% endif %}
{% if openstack.release == "victoria" and commercial.enabled %}
images:
  tags:
    test: {{repositories.registry_commercial}}/vanillastack/ubuntu-source-rally:victoria_20201215
    db_init: {{repositories.registry_commercial}}/vanillastack/ubuntu-source-heat-base:victoria_20201215
    cinder_db_sync: {{repositories.registry_commercial}}/vanillastack/ubuntu-source-cinder-base:victoria_20201215
    db_drop: {{repositories.registry_commercial}}/vanillastack/ubuntu-source-heat-base:victoria_20201215
    ks_user: {{repositories.registry_commercial}}/vanillastack/ubuntu-source-heat-base:victoria_20201215
    ks_service: {{repositories.registry_commercial}}/vanillastack/ubuntu-source-heat-base:victoria_20201215
    ks_endpoints: {{repositories.registry_commercial}}/vanillastack/ubuntu-source-heat-base:victoria_20201215
    cinder_api: {{repositories.registry_commercial}}/vanillastack/ubuntu-source-cinder-api:victoria_20201215
    bootstrap: {{repositories.registry_commercial}}/vanillastack/ubuntu-source-heat-base:victoria_20201215
    cinder_scheduler: {{repositories.registry_commercial}}/vanillastack/ubuntu-source-cinder-scheduler:victoria_20201215
    cinder_volume: {{repositories.registry_commercial}}/vanillastack/ubuntu-source-cinder-volume:victoria_20201215
    cinder_volume_usage_audit: {{repositories.registry_commercial}}/vanillastack/ubuntu-source-cinder-volume:victoria_20201215
    cinder_storage_init: {{repositories.registry_commercial}}/vanillastack/ceph-config-helper:latest-ubuntu_bionic
    cinder_backup: {{repositories.registry_commercial}}/vanillastack/ubuntu-source-cinder-backup:victoria_20201215
    cinder_backup_storage_init: {{repositories.registry_commercial}}/vanillastack/ceph-config-helper:latest-ubuntu_bionic
    dep_check: {{repositories.registry_commercial}}/vanillastack/kubernetes-entrypoint:v1.0.0
    image_repo_sync: {{repositories.registry_commercial}}/vanillastack/docker:17.07.0
{% endif %}
pod:
  replicas:
    api: {{openstack.cinder.api.replicas}}
    volume: {{openstack.cinder.volume.replicas}}
    scheduler: {{openstack.cinder.scheduler.replicas}}
    backup: {{openstack.cinder.backup.replicas}}
  security_context:
    cinder_volume:
      pod:
        runAsUser: 0
      container:
        ceph_keyring_placement:
          runAsUser: 0
          readOnlyRootFilesystem: true
        ceph_coordination_volume_perms:
          runAsUser: 0
          readOnlyRootFilesystem: true
        init_cinder_conf:
          runAsUser: 0
          readOnlyRootFilesystem: true
        cinder_volume:
          readOnlyRootFilesystem: true

conf:
  cinder:
    DEFAULT:
      resource_query_filters_file: /etc/cinder/resource_filters.json
      log_config_append: /etc/cinder/logging.conf
      use_syslog: false
      use_stderr: true
      enable_v1_api: {{openstack.cinder.api.v1Enabled}}
      volume_name_template: "%s"
      osapi_volume_workers: {{openstack.cinder.volume.osapiVolumeWorkers}}
      glance_api_version: {{openstack.glance.api.version}}
      os_region_name: {{openstack.region}}
      host: cinder-volume-worker
      # NOTE(portdirect): the bind port should not be defined, and is manipulated
      # via the endpoints section.
      osapi_volume_listen_port: null
{% if openstack.cinder.rbd.enabled %}
      enabled_backends: "rbd1"
      default_volume_type: "rbd1"
{% if openstack.cinder.backup.enabled %}
      backup_driver: "cinder.backup.drivers.swift.SwiftBackupDriver"
      # Backup: Ceph RBD options
      backup_ceph_conf: "/etc/ceph/ceph.conf"
      backup_ceph_user: {{openstack.cinder.rbd.rbdBackupUser}}
      backup_ceph_pool: {{openstack.cinder.rbd.rbdBackupPool}}
      # Backup: Posix options
      backup_posix_path: /var/lib/cinder/backup
{% endif %}
{% endif %}
      auth_strategy: keystone
      # Internal tenant id
      internal_project_name: internal_cinder
      internal_user_name: internal_cinder
  backends:
    # Those options will be written to backends.conf as-is.
{% if openstack.cinder.rbd.enabled %}
    rbd1:
      volume_driver: cinder.volume.drivers.rbd.RBDDriver
      volume_backend_name: rbd1
      rbd_pool: {{openstack.cinder.rbd.rbdPool}}
      rbd_ceph_conf: "/etc/ceph/ceph.conf"
      rbd_flatten_volume_from_snapshot: false
      report_discard_supported: true
      rbd_max_clone_depth: 5
      rbd_store_chunk_size: 4
      rados_connect_timeout: -1
      rbd_user: {{openstack.cinder.rbd.rbdUser}}
      image_volume_cache_enabled: True
      image_volume_cache_max_size_gb: 200
      image_volume_cache_max_count: 50
{% if openstack.ceph.enabled %}
  ceph:
    override:
    append:
    admin_keyring: null
    monitors: rook-ceph-mon-a.{{rook.namespace}}.svc.cluster.local:6789,rook-ceph-mon-b.{{rook.namespace}}.svc.cluster.local:6789,rook-ceph-mon-c.{{rook.namespace}}.svc.cluster.local:6789
    pools:
      {{openstack.cinder.rbd.rbdBackupPool}}:
        replication: 3
        crush_rule: replicated_rule
        chunk_size: 8
        app_name: cinder-backup
      {{openstack.cinder.rbd.rbdPool}}:
        replication: 3
        crush_rule: replicated_rule
        chunk_size: 8
        app_name: cinder-volume
{% endif %}
{% endif %}
endpoints:
  volume:
    host_fqdn_override:
      public:
        host: {{openstack.cinder.endpoints.publicURLPrefix}}.{{openstack.publicDomain}}
{% if openstack.tls.enabled and openstack.tls.useCertManager %}
        tls:
          key: dummy
          crt: dummy
{% if LE_issuer_name == "letsencrypt-staging" %}
          ca: |
{{tls.staging.rootCACert |b64decode| indent( width=12, indentfirst=True) }}
{% elif LE_issuer_name == "letsencrypt-prod" %}
          ca: |
{{tls.prod.rootCACert | b64decode | indent( width=12, indentfirst=True) }}
{% elif LE_issuer_name == "certmanager-selfsigned" %}
          ca: |
{{selfSignedCA | b64decode | indent( width=12, indentfirst=True) }}
{% endif %}
{% endif %}
    scheme:
      default: http
{% if openstack.tls.enabled %}
      public: https
    port:
      api:
        public: 443
{% endif %}
{% if openstack.tls.enabled and openstack.tls.useCertManager %}
    certs:
      barbican:
        secretName: barbican-tls
        issuerRef:
          name: openstack-{{LE_issuer_name}}
          kind: Issuer
{% endif %}
  volumev2:
    host_fqdn_override:
      public:
        host: {{openstack.cinder.endpoints.publicURLPrefix}}.{{openstack.publicDomain}}
{% if openstack.tls.enabled and openstack.tls.useCertManager %}
        tls:
          key: dummy
          crt: dummy
{% if LE_issuer_name == "letsencrypt-staging" %}
          ca: |
{{tls.staging.rootCACert |b64decode| indent( width=12, indentfirst=True) }}
{% elif LE_issuer_name == "letsencrypt-prod" %}
          ca: |
{{tls.prod.rootCACert | b64decode | indent( width=12, indentfirst=True) }}
{% elif LE_issuer_name == "certmanager-selfsigned" %}
          ca: |
{{selfSignedCA | b64decode | indent( width=12, indentfirst=True) }}
{% endif %}
{% endif %}
    scheme:
      default: http
{% if openstack.tls.enabled %}
      public: https
    port:
      api:
        public: 443
{% endif %}
{% if openstack.tls.enabled and openstack.tls.useCertManager %}
    certs:
      barbican:
        secretName: barbican-tls
        issuerRef:
          name: openstack-{{LE_issuer_name}}
          kind: Issuer
{% endif %}
  volumev3:
    host_fqdn_override:
      public:
        host: {{openstack.cinder.endpoints.publicURLPrefix}}.{{openstack.publicDomain}}
{% if openstack.tls.enabled and openstack.tls.useCertManager %}
        tls:
          key: dummy
          crt: dummy
{% if LE_issuer_name == "letsencrypt-staging" %}
          ca: |
{{tls.staging.rootCACert |b64decode| indent( width=12, indentfirst=True) }}
{% elif LE_issuer_name == "letsencrypt-prod" %}
          ca: |
{{tls.prod.rootCACert | b64decode | indent( width=12, indentfirst=True) }}
{% elif LE_issuer_name == "certmanager-selfsigned" %}
          ca: |
{{selfSignedCA | b64decode | indent( width=12, indentfirst=True) }}
{% endif %}
{% endif %}
    scheme:
      default: http
{% if openstack.tls.enabled %}
      public: https
    port:
      api:
        public: 443
{% endif %}
{% if openstack.tls.enabled and openstack.tls.useCertManager %}
    certs:
      barbican:
        secretName: barbican-tls
        issuerRef:
          name: openstack-{{LE_issuer_name}}
          kind: Issuer
{% endif %}
  identity:
    name: keystone
    auth:
{% if openstack.tls.enabled %}
      cacert: /tmp/openstack_ca.crt
{% endif %}
      admin:
        region_name: {{openstack.region}}
        username: admin
        password: {{openstack.keystone.auth.admin.password}}
        project_name: admin
        user_domain_name: default
        project_domain_name: default
      cinder:
        role: admin
        region_name: {{openstack.region}}
        username: cinder
        password: {{openstack.cinder.auth.service.password}}
        project_name: service
        user_domain_name: service
        project_domain_name: service
      test:
        role: admin
        region_name: {{openstack.region}}
        username: cinder-test
        password: {{openstack.cinder.auth.cinderTest.password}}
        project_name: test
        user_domain_name: service
        project_domain_name: service
  oslo_db:
    auth:
      admin:
        username: root
        password: {{openstack.mariadb.auth.admin.password}}
        secret:
          tls:
            internal: mariadb-tls-direct
      cinder:
        username: cinder
        password: {{openstack.cinder.auth.db.password}}
  oslo_messaging:
    auth:
      admin:
        username: rabbitmq
        password: {{openstack.rabbitmq.auth.admin.password}}
      cinder:
        username: cinder
        password: {{openstack.cinder.auth.messaging.password}}
network:
  api:
    ingress:
      public: true
      classes:
        namespace: "nginx"
        cluster: "nginx-cluster"
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /
        kubernetes.io/ingress.class: nginx
{% if openstack.tls.enabled and openstack.tls.useCertManager %}
#        kubernetes.io/tls-acme: "true"
#        nginx.ingress.kubernetes.io/backend-protocol: "https"
{% endif %}
{% if openstack.tls.enabled and openstack.tls.useCertManager %}
        cert-manager.io/issuer: "openstack-{{LE_issuer_name}}"
{% endif %}

manifests:
  deployment_backup: {{openstack.cinder.backup.enabled}}
  secret_ingress_tls: false
