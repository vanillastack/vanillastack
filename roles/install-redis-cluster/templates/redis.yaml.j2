cluster:
  externalAccess:
    enabled: false
  init: true
  nodes: 9
  replicas: 2
containerSecurityContext:
  enabled: true
  runAsUser: 1001
  sysctls: null
fullnameOverride: "redis-{{ redis.environment | default('testing') }}"
global:
  storageClass: {{ redis.persistence.storageClass }}
image:
  pullPolicy: IfNotPresent
  pullSecrets: null
  registry: {{repositories.registry_commercial}}
  repository: vanillastack/redis-cluster
  tag: 6.2-debian-10
metrics:
  enabled: true
  image:
    pullPolicy: IfNotPresent
    pullSecrets: null
    registry: {{repositories.registry_commercial}}
    repository: vanillastack/redis-exporter
    tag: 1.18.0-debian-10-r10
  podAnnotations:
    prometheus.io/port: "9121"
    prometheus.io/scrape: "true"
  prometheusRule:
    enabled: true
    additionalLabels:
      app: kube-prometheus-stack
      release: prometheus-operator
    {% raw %}
    rules:
      - alert: RedisDown
        expr: redis_up{service="{{ template "common.names.fullname" . }}-metrics"} == 0
        for: 2m
        labels:
          severity: error
        annotations:
          summary: "Redis(TM) instance {{ "{{ $instance }}" }} down"
          description: "Redis(TM) instance {{ "{{ $instance }}" }} is down."
    {% endraw %}
password: {{ redis.password }}
persistence:
  accessModes:
  - ReadWriteOnce
  enabled: true
  matchExpressions: {}
  matchLabels: {}
  path: /data
  size: {{ redis.persistence.size }}
  storageClass: "{{ redis.persistence.storageClass }}"
  subPath: ""
podSecurityContext:
  enabled: true
  fsGroup: 1001
  runAsUser: 1001
  sysctls: null
podSecurityPolicy:
  create: true
rbac:
  create: false
  role:
    rules: []
redis:
  affinity: {}
  busPort: 16379
  livenessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 20
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  podAntiAffinityPreset: soft
  podLabels: {}
  port: 6379
  readinessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 20
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  useAOFPersistence: "yes"
service:
  annotations: {}
  labels: {}
  port: 6379
  type: ClusterIP
serviceAccount:
  create: false
  name: null
sysctlImage:
  command: []
  enabled: false
  mountHostSys: false
  pullPolicy: Always
  pullSecrets: null
  registry: docker.io
  repository: bitnami/minideb
  resources: {}
  tag: buster
tls:
  authClients: true
  certCAFilename: null
  certFilename: null
  certKeyFilename: null
  certificatesSecret: null
  dhParamsFilename: null
  enabled: false
usePassword: true
usePasswordFile: false
volumePermissions:
  enabled: false
  image:
    pullPolicy: Always
    pullSecrets: null
    registry: docker.io
    repository: bitnami/minideb
    tag: buster
  resources: {}

