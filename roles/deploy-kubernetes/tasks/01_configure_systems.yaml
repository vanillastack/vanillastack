---
- name: Check if distribution is supported
  fail:
    msg: This disribution is currently not supported by VanillaStack
  when: ansible_os_family == 'Suse' or (ansible_distribution == 'CentOS' and ansible_distribution_major_version != '8') or (ansible_distribution == 'Fedora' and ansible_distribution_major_version != '32') or (ansible_distribution == 'Debian' and ansible_distribution_major_version != '10') or (ansible_distribution == 'Ubuntu' and ansible_distribution_version != '20.04')

- name: Install EPEL
  package:
    name: epel-release
  when: ansible_distribution == 'CentOS'
 
- name: Install neccessary packages
  package:
    name:
      - ansible
      - curl
      - gnupg
      - git
      - jq
      - lvm2
      - vim
      - python3-passlib
      - python3-pip
      - python3-kubernetes
      - python3-openshift
      - python3-pyyaml
      - python3-wheel
      - tar
  register: result
  until: result is not failed
  retries: 10
  delay: 10

- name: Install additional packages
  package:
    name:
      - python3-devel
      - gcc
      - gcc-c++
      - gcc-toolset-9
  when: ansible_os_family == 'Suse' or ansible_distribution == 'CentOS'

- name: make sure, domain search is not set
  lineinfile:
    regexp: '^(.*)search(.*)$'
    state: absent
    path: /etc/resolv.conf

- name: Add /usr/local/bin to global PATH
  copy:
    dest: /etc/profile.d/custom-path.sh
    content: 'PATH=$PATH:/usr/local/bin'
  when: ansible_distribution == 'CentOS'

- name: get helm script
  get_url:
    url: https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
    dest: /tmp/get_helm.sh
    mode: '0700'

- name: install helm
  command: /tmp/get_helm.sh
  environment:
    DESIRED_VERSION: "{{ kubernetes.helm_version }}"
  ignore_errors: yes

#### REDHAT FAMILY
- name: configure RHEL Systems
  when: ansible_distribution == 'Fedora' or ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
  block:
  - name: remove cockpit
    package:
      state: absent
      name: cockpit*
    ignore_errors: yes

  - name: install pip modules
    pip:
      name:
        - pyhelm
      extra_args: --ignore-installed

  - name: Add cf repo      
    yum_repository:
      name: cloudfoundry
      description: cloudfoundry repo
      baseurl: https://packages.cloudfoundry.org/fedora
      gpgcheck: 1
      gpgkey: https://packages.cloudfoundry.org/fedora/cli.cloudfoundry.org.key
  
  - name: Add kubernetes repo
    yum_repository:
      name: kubernetes
      description: kubernetes repo
      baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-$basearch
      gpgcheck: 1
      gpgkey: https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
      exclude: kubelet kubeadm kubectl
  
  - name: enable crio
    command: "dnf module enable cri-o:{{ kubernetes.crioVersion }} -y" 
    when: ansible_distribution == 'Fedora'

  - name: Add kubic stable repo
    yum_repository:
      name: devel_kubic_libcontainers_stable
      description: "Stable Releases of Upstream github.com/containers packages (CentOS_8)"
      baseurl: https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/CentOS_8/
      gpgcheck: 1
      gpgkey: https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/CentOS_8/repodata/repomd.xml.key
    when: ansible_distribution == 'CentOS'

  - name: Add CRI-O repo
    yum_repository: 
      name: "devel_kubic_libcontainers_stable_cri-o_{{ kubernetes.crioVersion }}"
      description: "Last release available in {{ kubernetes.crioVersion }} branch (CentOS_8)"
      baseurl: https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/1.18/CentOS_8/
      gpgcheck: 1
      gpgkey: https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/1.18/CentOS_8/repodata/repomd.xml.key
    when: ansible_distribution == 'CentOS'
  
  - name: get latest kube version
    shell: dnf --showduplicate list  kubelet --disableexcludes=kubernetes | grep {{ kubernetes.version }} | tail -1 | tr -s ' ' | cut -d ' ' -f2
    register: dnf_output

  - name: get kubeversion
    set_fact:
      versions: "{{ dnf_output.stdout }}"
  
  - name: Install packages
    package:
      name:
        - cf7-cli
        - "kubelet-{{ versions }}"
        - "kubeadm-{{ versions }}"
        - "kubectl-{{ versions }}"
        - grubby
        - cri-o
        - nfs-utils
        - iproute
      disable_excludes: kubernetes
  
  - name: Disable SELinux
    selinux:
      state: disabled
  
  - name: Enable fstrim.timer
    systemd:
      name: fstrim.timer
      state: started
      enabled: yes

  - name: Check if systemd.unified_cgroup_hierarchy in grubenv already
    command: grep -Fq "systemd.unified_cgroup_hierarchy=0" /boot/grub2/grubenv
    register: grubenv_systemd_check
    check_mode: no
    ignore_errors: yes
    changed_when: no
  
  - name: Fix for systemd version 245
    template:
      src: 99-rp_filter.conf
      dest: /usr/lib/sysctl.d/99-rp_filter.conf
      mode: '0644'
      owner: root
      group: root
    register: systemd_version_245_sysctl_fix
  
  - name: Call grubby to switch back to cgroups v1
    command: grubby --update-kernel=ALL --args=systemd.unified_cgroup_hierarchy=0 --make-default
    when: grubenv_systemd_check.rc != 0

  - name: configure rpm kubelet
    lineinfile:
      path: /etc/sysconfig/kubelet
      regexp: '^(.*)KUBELET_EXTRA_ARGS(.*)$'
      line: 'KUBELET_EXTRA_ARGS=--cgroup-driver=systemd --container-runtime=remote --container-runtime-endpoint="unix:///var/run/crio/crio.sock"'
      create: true

  - name: Set CRI-O cgroups driver
    lineinfile:
      path: /etc/crio/crio.conf
      state: present
      regexp: '^cgroup_manager =.*'
      line: 'cgroup_manager = "systemd"'
  
  - name: Set CRI-O default_ulimits
    blockinfile:
      path: /etc/crio/crio.conf
      marker: "# {mark} ANSIBLE MANAGED BLOCK"
      block: |
        default_ulimits = [
            "nofile=16384:24576",
            "nproc=8192:8192"
        ]
  
  - name: remove seccomp from crio
    lineinfile:
      path: /etc/crio/crio.conf
      regexp: '^(.*)seccomp_profile =(.*)$'
      line: 'seccomp_profile = ""'
      backrefs: yes

  - name: fix runc runtime path in crio config
    lineinfile:
      path: /etc/crio/crio.conf
      regexp: '^  runtime_path =(.*)$'
      line: '  runtime_path = "/usr/sbin/runc"'
      backrefs: yes

- name: Disable Transparent Hugepages
  copy:
    src: disable-transparent-huge-pages.service
    dest: /etc/systemd/system/disable-transparent-huge-pages.service
    mode: 0644
    owner: root
    group: root

- name: Enable and start Disable Transparent Hugepages service
  systemd:
    name: disable-transparent-huge-pages
    enabled: true
    state: started

- name: configure timesyncd for ntp
  template:
    src: timesyncd.conf.j2
    dest: /etc/systemd/timesyncd.conf
    mode: 0444
  notify: restart timesyncd
  when: ntp.manage_timesyncd

- name: Uninstall ntp package
  apt:
    name: ntp
    state: absent
  when: ntp.manage_timesyncd

- name: Set CRI-O seccomp profile path
  lineinfile:
    path: /etc/crio/crio.conf
    state: present
    regexp: '^pids_limit*.'
    line: 'pids_limit = 8192'

- name: "Check for installed packages"
  package_facts:
    manager: "auto"

- name: Disable Firewall
  systemd:
    name: "{{ item }}"
    masked: true
    enabled: false
    state: stopped
  when: "item in ansible_facts.packages"
  loop:
    - "firewalld"
    - "ufw"

- name: Upgrade all packages to the latest version
  package:
    name: "*"
    state: latest
  register: result
  until: result is not failed
  retries: 10
  delay: 10

- name: Set nofile soft limit
  community.general.pam_limits:
    limit_type: soft
    limit_item: nofile
    value: 1048576
    domain: '*'

- name: Set nofile hard limit
  community.general.pam_limits:
    limit_type: hard
    limit_item: nofile
    value: 1048576
    domain: '*'
