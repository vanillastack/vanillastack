---
- name: Get available Kubernetes version
  shell: apt-cache madison kubeadm | grep {{ kubernetes.version }} | head -1 | tr -s ' ' | cut -d ' ' -f4
  register: kubeversion_apt_output

- name: Set Kubernetes version variable
  set_fact:
    kube_version: "{{ kubeversion_apt_output.stdout }}"

- name: Get available CRI-O version
  shell: apt-cache madison cri-o | grep {{ kubernetes.crioVersion }} | head -1 | tr -s ' ' | cut -d ' ' -f4
  register: crioversion_apt_output

- name: Set CRI-O Package version
  set_fact:
    crio_package_version: "{{ crioversion_apt_output.stdout }}"

- name: Unhold packages
  command: apt-mark unhold {{ item }}
  with_items:
    - "kubelet"
    - "kubeadm"
    - "kubectl"
    - "cri-o"
    - "cri-o-runc"

- name: Install kube packages
  apt:
    pkg:
      - "kubelet={{ kube_version }}"
      - "kubeadm={{ kube_version }}"
      - "kubectl={{ kube_version }}"
    update_cache: true
    force_apt_get: yes
  register: kube_apt_result
  until: kube_apt_result is not failed
  retries: 10
  delay: 10

- name: Install cri-o packages
  apt:
    pkg:
      - "cri-o={{ crio_package_version }}"
      - "cri-o-runc={{ kubernetes.crioRuncVersion }}"
    update_cache: true
    force_apt_get: yes
  register: crio_apt_result
  until: crio_apt_result is not failed
  retries: 10
  delay: 10

- name: Hold packages
  dpkg_selections:
    name: "{{ item }}"
    selection: hold
  with_items:
    - "kubelet"
    - "kubeadm"
    - "kubectl"
    - "cri-o"
    - "cri-o-runc"

- name: Set restart-without-asking debconf flag to false
  ansible.builtin.debconf:
    name: "{{ item }}"
    question: libraries/restart-without-asking
    value: 'false'
    vtype: boolean
  loop:
    - kubelet
    - cri-o
    - cri-o-runc

- name: Set restart-services debconf flag to false
  ansible.builtin.debconf:
    name: "{{ item }}"
    question: libraries/restart-services
    value: 'false'
    vtype: boolean
  loop:
    - kubelet
    - cri-o
    - cri-o-runc

- include_tasks: kubeadm_version_check.yaml
