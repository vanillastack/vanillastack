---
- name: Check if distribution is supported
  ansible.builtin.fail:
    msg: This disribution is currently not supported by VanillaStack
  when: ansible_os_family != 'RedHat'

# This task includes all Steps to install packages to the systems
- include_tasks: 00_install_packages_to_nodes.yaml
  when: not offline_install

- name: Set kube_version if in offline mode
  when: offline_install
  block:
    - ansible.builtin.shell: yum list --installed | grep kubeadm | head -1 | tr -s ' ' |  cut -d ' ' -f2
      register: kube_version_output
    - ansible.builtin.set_fact:
        kube_version: "{{ kube_version_output.stdout }}"

- name: configure timesyncd for ntp
  ansible.builtin.template:
    src: etc/systemd/timesyncd.conf.j2
    dest: /etc/systemd/timesyncd.conf
    mode: 0444
  notify: restart timesyncd
  when: ntp.manage_timesyncd

- name: Enable fstrim.timer
  ansible.builtin.systemd:
    name: fstrim.timer
    state: started
    enabled: true

- name: Make sure, domain search is not set
  ansible.builtin.lineinfile:
    regexp: "^(.*)search(.*)$"
    state: absent
    path: /etc/resolv.conf

- name: Save kubeversion to YAML file
  ansible.builtin.lineinfile:
    path: /tmp/kubeversion.yml
    regexp: "^(.*)version(.*)$"
    line: "version: {{ kube_version | regex_replace('-[0-9]+', '') }}"
    create: true

- name: Fetch kubeversion.yml
  become: true
  ansible.builtin.fetch:
    src: "/tmp/kubeversion.yml"
    dest: "/tmp/kubeversion.yml"
    flat: true
  run_once: true

- include_tasks: configure_crio.yaml

- name: "Check for installed packages"
  ansible.builtin.package_facts:
    manager: "auto"

- name: Disable Firewall
  ansible.builtin.systemd:
    name: "{{ item }}"
    masked: true
    enabled: false
    state: stopped
  when: "item in ansible_facts.packages"
  loop:
    - "firewalld"
    - "ufw"

- name: Disable rpcbind
  ansible.builtin.systemd:
    name: "rpcbind"
    state: stopped
    enabled: false

- name: Copy Fail2ban jail.conf
  ansible.builtin.template:
    src: etc/fail2ban/jail.conf.j2
    dest: /etc/fail2ban/jail.conf

- name: Enable Fail2ban
  ansible.builtin.systemd:
    name: "fail2ban"
    enabled: true
    state: restarted

- name: Set nofile soft limit
  community.general.pam_limits:
    limit_type: soft
    limit_item: nofile
    value: 1048576
    domain: "*"

- name: Set nofile hard limit
  community.general.pam_limits:
    limit_type: hard
    limit_item: nofile
    value: 1048576
    domain: "*"

- name: Add api name to hosts file
  ansible.builtin.lineinfile:
    path: /etc/hosts
    state: present
    line: "{{ loadbalancerIP }} api.{{ clusterTLDomain }}"
  when: loadbalancerIP is defined or loadbalancerIP|trim != ""

- name: Copy disable transparent huge pages service unit file
  ansible.builtin.copy:
    src: etc/systemd/system/disable-transparent-huge-pages.service
    dest: /etc/systemd/system/disable-transparent-huge-pages.service
    owner: root
    group: root
    mode: 0644

- name: Reload systemd
  ansible.builtin.systemd:
    daemon_reload: true

- name: Enable and start disable transparent huge pages service
  ansible.builtin.systemd:
    name: disable-transparent-huge-pages
    state: restarted
    enabled: true

- name: Create hosts file entry
  ansible.builtin.lineinfile:
    path: "/etc/hosts"
    line: "{{ hostvars[item]['ansible_host'] }} {{ item }}"
  with_items:
    - "{{ groups['master'] }}"
    - "{{ groups['worker'] }}"

- name: Set Hostname as defined in inventory file
  ansible.builtin.shell: "echo {{ inventory_hostname }} > /etc/hostname"

- name: Configure Container Policies
  ansible.builtin.copy:
    mode: 0644
    owner: root
    src: etc/containers/policy.json
    dest: /etc/containers/policy.json
