---
- name: Check if distribution is supported
  fail:
    msg: This disribution is currently not supported by VanillaStack
  when: ansible_distribution != 'Debian'

- name: Preinstall packages
  apt:
    name:
      - gnupg
      - python3

- name: Remove old repositories
  file:
    path: "{{item}}"
    state: absent
  with_items:
    - "/etc/apt/sources.list.d"
    - /etc/apt/sources.list

- name: Add key for Cloudical repos
  apt_key:
    url: "{{ item }}"
  loop:
    - "{{repositories.package_repository}}/public-gpg-key"
  retries: 3
  delay: 1
  register: result
  until: result is success

- name: Add Cloudical Repositories
  apt_repository:
    repo: "{{ item }}"
    state: present
  loop:
    - "deb {{repositories.package_repository}} {{staging_tag}}-pip3 main"
    - "deb {{repositories.package_repository}} {{staging_tag}}-ansible main"
    - "deb {{repositories.package_repository}} {{staging_tag}}-debian-buster-main main"
    - "deb {{repositories.package_repository}} {{staging_tag}}-debian10-crio-{{kubernetes.crioVersion}} main"
    - "deb {{repositories.package_repository}} {{staging_tag}}-helm main"
    - "deb {{repositories.package_repository}} {{staging_tag}}-kubernetes-xenial main"
    - "deb {{repositories.package_repository}} {{staging_tag}}-cloudfoundry main"
  retries: 3
  delay: 1
  register: result
  until: result is success

- name: Install neccessary packages
  apt:
    name:
      - gnupg
      - git
      - vim
      - lvm2
      - jq
      - curl
      - tar
      - ansible
      - needrestart
      - helm
      - cf-cli
      - nfs-common
      - iproute2
      - python3-openshift
      - python3-pyhelm
      - python3-pip
      - python3-kubernetes
      - python3-passlib
      - fail2ban
      - python3-jmespath
    autoclean: yes
    update_cache: yes
    autoremove: yes
  register: result
  until: result is not failed
  retries: 10
  delay: 10


- name: Upgrade OS
  apt:
    autoclean: yes
    update_cache: yes
    autoremove: yes
    upgrade: dist
  register: result
  until: result is not failed
  retries: 10
  delay: 10

- name: Upgrade all packages to the latest version
  apt:
    autoclean: yes
    update_cache: yes
    autoremove: yes
    name: '*'
    state: latest
  register: result
  until: result is not failed
  retries: 10
  delay: 10

- name: configure timesyncd for ntp
  template:
    src: timesyncd.conf.j2
    dest: /etc/systemd/timesyncd.conf
    mode: 0444
  notify: restart timesyncd
  when: ntp.manage_timesyncd

- name: make sure, domain search is not set
  lineinfile:
    regexp: '^(.*)search(.*)$'
    state: absent
    path: /etc/resolv.conf

- name: make sure, unattended upgrades is removed
  package:
    name: unattended-upgrades
    state: absent

- name: get latest kube version
  shell: apt-cache madison kubeadm | grep {{ kubernetes.version }} | head -1 | tr -s ' ' | cut -d ' ' -f4
  register: apt_output

- name: get kubeversion
  set_fact:
    versions: "{{ apt_output.stdout }}"

- name: workaround to get correct libcompversion
  block:
    - name: add backportsrepository
      lineinfile:
        path: /etc/apt/sources.list
        regexp: '^(.*)buster-backports(.*)$'
        line: 'deb http://deb.debian.org/debian buster-backports main'
        create: true
    - apt:
        update_cache: yes
        autoclean: yes
        autoremove: yes
    - name: install libseccomp
      command: apt-get -y -t buster-backports install libseccomp2
      args:
        warn: false

- name: Install packages
  apt:
    pkg:
      - "kubelet={{ versions }}"
      - "kubeadm={{ versions }}"
      - "kubectl={{ versions }}"
      - "cri-o"
      - "cri-o-runc"
      - libgtk2.0-0
    update_cache: yes
    autoclean: yes
    autoremove: yes
  register: result
  until: result is not failed
  retries: 10
  delay: 10

- name: mark packages as hold
  command: "apt-mark hold {{ item }}" 
  with_items:
    - "kubelet"
    - "kubeadm"
    - "kubectl"
    - "cri-o"
    - "cri-o-runc"

- name: configure crio
  lineinfile:
    path: /etc/crio/crio.conf
    regexp: '^(.*)conmon =(.*)$'
    line: 'conmon = "/usr/bin/conmon"'
    backrefs: yes

- name: fix runc runtime path in crio config
  lineinfile:
    path: /etc/crio/crio.conf
    regexp: '^runtime_path =(.*)$'
    line: 'runtime_path = "/usr/lib/cri-o-runc/sbin/runc"'
    backrefs: yes

- name: configure kubelet
  lineinfile:
    path: /etc/default/kubelet
    regexp: '^(.*)KUBELET_EXTRA_ARGS(.*)$'
    line: 'KUBELET_EXTRA_ARGS=--cgroup-driver=systemd --container-runtime=remote --container-runtime-endpoint="unix:///var/run/crio/crio.sock"'
    create: true
    
- name: Set CRI-O cgroups driver
  lineinfile:
    path: /etc/crio/crio.conf
    state: present
    regexp: '^cgroup_manager =.*'
    line: 'cgroup_manager = "systemd"'

- name: Set CRI-O default_ulimits
  blockinfile:
    path: /etc/crio/crio.conf
    marker: "# {mark} ANSIBLE MANAGED BLOCK"
    block: |
      default_ulimits = [
          "nofile=16384:24576",
          "nproc=8192:8192"
      ]

#- name: Set CRI-O seccomp profile path
#  lineinfile:
#    path: /etc/crio/crio.conf
#    state: present
#    regexp: '^seccomp_profile =.*'
#    line: 'seccomp_profile = "/usr/share/containers/seccomp.json"'

- name: remove preconfigures crio.conf from dpkg
  file:
    path: /etc/crio/crio.conf.d/01-crio-runc.conf
    state: absent

- name: Set CRI-O PIDs limit
  lineinfile:
    path: /etc/crio/crio.conf
    state: present
    regexp: '^pids_limit*.'
    line: 'pids_limit = 8192'

- name: "Check for installed packages"
  package_facts:
    manager: "auto"

- name: Disable Firewall
  systemd:
    name: "{{ item }}"
    masked: true
    enabled: false
    state: stopped
  when: "item in ansible_facts.packages"
  loop:
    - "firewalld"
    - "ufw"

- name: Disable rpcbind
  systemd:
    name: "rpcbind"
    state: stopped
    enabled: no

- name: Copy Fail2ban jail.conf
  template:
    src: jail.conf.j2 
    dest: /etc/fail2ban/jail.conf
 
- name: Enable Fail2ban
  systemd:
    name: "fail2ban"
    enabled: true
    state: restarted

- name: Set nofile soft limit
  community.general.pam_limits:
    limit_type: soft
    limit_item: nofile
    value: 1048576
    domain: '*'

- name: Set nofile hard limit
  community.general.pam_limits:
    limit_type: hard
    limit_item: nofile
    value: 1048576
    domain: '*'

- name: set hosts if kubeapi is not dns resolvable
  lineinfile:
    path: /etc/hosts
    state: present
    line: "{{ loadbalancerIP }} {{ clusterTLDomain }}"