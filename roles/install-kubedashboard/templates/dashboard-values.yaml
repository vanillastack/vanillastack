affinity: {}
annotations: {}
containerSecurityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsGroup: 2001
  runAsUser: 1001
extraEnv: []
image:
  pullPolicy: IfNotPresent
  pullSecrets: []
{% if commercial.enabled %}
  repository: {{repositories.registry_commercial}}/vanillastack/dashboard
{% else %}
  repository: kubernetesui/dashboard
{% endif %}
  tag: v2.0.3
ingress:
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: 1024m
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "{{ LE_issuer_name }}"
    kubernetes.io/tls-acme: "true"
  hosts:
    - "{{ kubernetes.dashboard.coreDomain }}"
  tls:
    - hosts:
      - "{{ kubernetes.dashboard.coreDomain }}"
      secretName: dashboard-ingress-tls
  customPaths: []
  enabled: true
  paths:
  - /
labels: {}
livenessProbe:
  initialDelaySeconds: 30
  timeoutSeconds: 30
metrics-server:
  enabled: false
metricsScraper:
  containerSecurityContext:
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    runAsGroup: 2001
    runAsUser: 1001
  enabled: false
  image:
    repository: kubernetesui/metrics-scraper
    tag: v1.0.4
  resources: {}
networkPolicy:
  enabled: false
nodeSelector: {}
podAnnotations:
  seccomp.security.alpha.kubernetes.io/pod: runtime/default
podDisruptionBudget:
  enabled: false
  maxUnavailable: null
  minAvailable: null
podLabels: {}
protocolHttp: false
rbac:
  clusterReadOnlyRole: false
  clusterRoleMetrics: true
  create: true
replicaCount: 1
resources:
  limits:
    cpu: 2
    memory: 200Mi
  requests:
    cpu: 100m
    memory: 200Mi
service:
  annotations: {}
  clusterServiceLabel:
    enabled: true
    key: kubernetes.io/cluster-service
  externalPort: 443
  labels: {}
  type: ClusterIP
serviceAccount:
  create: true
  name: null
tolerations: []


