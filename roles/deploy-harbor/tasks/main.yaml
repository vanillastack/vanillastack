---
- name: Create Namespace
  kubernetes.core.k8s:
    state: present
    kind: Namespace
    name: "{{harbor.namespace}}"
    api_version: v1

- name: Copy postgres.yaml
  template:
    src: ./templates/postgres.yaml.j2
    dest: /tmp/harbor_postgres.yaml

- name: Create PostgreSQL
  kubernetes.core.k8s:
    src: /tmp/harbor_postgres.yaml
    state: present

- name: Delete postgres.yaml
  file:
    path: /tmp/harbor_postgres.yaml
    state: absent

- name: Deploy Redis
  kubernetes.core.helm:
    name: redis
    release_namespace: "{{harbor.namespace}}"
    create_namespace: true
    chart_ref: "vanillastack/redis"
    chart_version: "{{ harbor.redis.chartVersion }}"
    values: "{{ lookup('template', 'redis.yaml.j2') | from_yaml }}"
    update_repo_cache: true

- name: Wait until postgres pod is ready
  shell: 'kubectl get postgresql -n {{ harbor.namespace }} | grep "harbor-postgresql" | grep "Running"'
  register: postgresReady
  until: postgresReady.rc == 0
  retries: 60
  delay: 10

- name: Register postgres application password
  shell: echo "$(kubectl get secret -n {{ harbor.namespace }} -o json harbor.harbor-postgresql.credentials.postgresql.acid.zalan.do|jq -r '.data.password')"|base64 -d
  register: postgrespassword

- name: Deploy Harbor
  kubernetes.core.helm:
    name: harbor
    release_namespace: "{{harbor.namespace}}"
    create_namespace: true
    chart_ref: "vanillastack/harbor"
    chart_version: "{{ harbor.chartVersion }}"
    values: "{{ lookup('template', 'harbor.yaml.j2') | from_yaml }}"

- name: Wait for pods to come up
  shell: kubectl get pods -o json -n "{{harbor.namespace}}" --field-selector=status.phase!=Succeeded
  retries: 120
  delay: 10
  register: kubectl_get_pods
  until: kubectl_get_pods.stdout|from_json|json_query('items[*].status.phase')|unique == ["Running"]
