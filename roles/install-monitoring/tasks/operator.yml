---
- name: Create prometheus user apache
  htpasswd:
    path: "/tmp/prometheus_auth"
    name: "{{ monitoring.admin_user }}"
    password: "{{ monitoring.admin_password }}"
    mode: 0640

- name: Slurp auth file prometheus
  slurp:
    src: "/tmp/prometheus_auth"
  register: prometheus_auth_slurp

- name: Create alertmanager user apache
  htpasswd:
    path: /tmp/alertmanager_auth
    name: "{{ alertmanager.admin_user }}"
    password: "{{ alertmanager.admin_password }}"
    mode: 0640

- name: Slurp auth file prometheus
  slurp:
    src: /tmp/alertmanager_auth
  register: alertmanager_auth_slurp

- name: Clear auth files
  file:
    state: absent
    path: "{{ item }}"
  loop:
    - /tmp/prometheus_auth
    - /tmp/alertmanager_auth

- name: Create monitoring namespace
  kubernetes.core.k8s:
    name: monitoring
    kind: Namespace
    state: present

- name: Create secret prometheus
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: prometheus-basic-auth
        namespace: monitoring
      type: Opaque
      data:
        auth: "{{ prometheus_auth_slurp.content }}"

- name: Create secret alertmanager
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: alertmanager-basic-auth
        namespace: monitoring
      type: Opaque
      data:
        auth: "{{ alertmanager_auth_slurp.content }}"

- name: Create etcd secrets for monitoring
  become: true
  become_user: root
  block:
    # etcd server.crt
    - name: Check that the /etc/kubernetes/pki/etcd/server.crt exists
      stat:
        path: /etc/kubernetes/pki/etcd/server.crt
      register: etcd_server_crt_result

    - name: Get etcd server.crt
      slurp:
        src: /etc/kubernetes/pki/etcd/server.crt
      register: etcd_server_crt_slurp
      when: etcd_server_crt_result.stat.exists

    # etcd server.key
    - name: Check that the /etc/kubernetes/pki/etcd/server.key exists
      stat:
        path: /etc/kubernetes/pki/etcd/server.key
      register: etcd_server_key_result

    - name: Get etcd server.key
      slurp:
        src: /etc/kubernetes/pki/etcd/server.key
      register: etcd_server_key_slurp
      when: etcd_server_key_result.stat.exists

    # etcd ca.crt
    - name: Check that the /etc/kubernetes/pki/etcd/ca.crt exists
      stat:
        path: /etc/kubernetes/pki/etcd/ca.crt
      register: etcd_ca_crt_result

    - name: Get etcd ca.crt
      slurp:
        src: /etc/kubernetes/pki/etcd/ca.crt
      register: etcd_ca_crt_slurp
      when: etcd_ca_crt_result.stat.exists

- name: Check if etcd secret exists
  k8s_info:
    api_version: v1
    kind: Secret
    name: etcd-certs
    namespace: monitoring
  register: etcd_secret

# TODO What if the etcd certs are expired?
- name: Create etcd secret if doesn't exist
  command: >
    kubectl create secret generic etcd-certs -n monitoring
    --from-literal=ca.crt="{{ etcd_ca_crt_slurp.content | b64decode }}"
    --from-literal=healthcheck-client.crt="{{ etcd_server_crt_slurp.content | b64decode }}"
    --from-literal=healthcheck-client.key="{{ etcd_server_key_slurp.content | b64decode }}"
  when:
    - etcd_secret.resources is defined
    - etcd_secret.resources|length == 0
    - etcd_server_crt_result.stat.exists
  no_log: true

- name: Install prometheus-operator
  kubernetes.core.helm:
    name: prometheus-operator
    chart_ref: vanillastack/kube-prometheus-stack
    release_namespace: monitoring
    values: "{{ lookup('template', 'operator_values.yml.j2') | from_yaml }}"
    chart_version: "{{ monitoring.chartVersion }}"
  retries: 3
  delay: 5
